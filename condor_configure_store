#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
import getopt
import os
import sys
import signal
import yaml
import tempfile
from wallabyclient.exceptions import WallabyError, WallabyValidateError
from wallabyclient import WallabyHelpers, WallabyTypes
from condorutils.osutil import run_cmd
from qmf.console import Session


def exit_signal_handler(signum, frame):
   sys.exit(0)


def print_help(name):
   print 'usage: %s [-h|--help] [-b|--broker <broker>] [-o|--port <port>] action [-f|--features feature[,feature,...]] [-p|--params param[,param,...]] [-n|--nodes hostname,hostname] [-g|--groups group[,group]] [-s|--subsys subsystem[,subsystem]]' % os.path.basename(name)
   print '  <broker>  - The ip/hostname of the broker used by the configuration store'
   print '  <port>    - The port of the broker used by the configuration store'
   print '  -h|--help - Print help'
   print '\naction:'
   print '  -a|--add             - Add the target(s) to the store'
   print '  -d|--delete          - Remove the target(s) from the store'
   print '  -e|--edit            - Edit the target(s) in the store'
   print '  -l|--list            - List specific information in the store'
   print '                         about the target(s) provided'
   print '  --list-all-features  - List all features in the store'
   print '  --list-all-groups    - List all groups in the store'
   print '  --list-all-nodes     - List all nodes in the store'
   print '  --list-all-params    - List all params in the store'
   print '  --list-all-subsystems- List all subsystems in the store'


def print_wallaby_types(data):
   def key_function((key,value)):
      # Prioritize name when sorting.
      prio = {'name':0, 'type':1, 'default':2, 'description':3, 'params':4}.get(key,99)
      return (prio, key)
   items = data.dict_as_list()
   items.sort(key=key_function)
   return items
   

def represent_feature(self, data):
   return self.represent_mapping(u'!Feature', print_wallaby_types(data))


def represent_group(self, data):
   return self.represent_mapping(u'!Group', print_wallaby_types(data))


def represent_node(self, data):
   return self.represent_mapping(u'!Node', print_wallaby_types(data))


def represent_param(self, data):
   return self.represent_mapping(u'!Parameter', print_wallaby_types(data))


def represent_subsys(self, data):
   return self.represent_mapping(u'!Subsystem', print_wallaby_types(data))


def main(argv=None):
   if argv is None:
      argv = sys.argv

   broker_ip = '127.0.0.1'
   port = 5672
   action = ''
   features = ''
   groups = ''
   nodes = ''
   params = ''
   subsys = ''
   config_store = []
   list_alls = []
   edit_objs = []
   username = ''
   passwd = ''

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'edit',
                'features=', 'groups=', 'help', 'list', 'list-all-features',
                'list-all-groups', 'list-all-nodes', 'list-all-params',
                'list-all-subsystems', 'nodes=', 'params=', 'password=',
                'port=', 'subsys=', 'user=']
   try:
      opts, args = getopt.getopt(argv[1:], 'ab:def:g:hln:p:P:o:s:U:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'delete'
      if option in ('-e', '--edit'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'edit'
      if option in ('-f', '--features'):
         features = arg
      if option in ('-g', '--groups'):
         groups += arg
      if option in ('-h', '--help'):
         print_help(argv[0])
         return(0)
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list'
      if option in ('--list-all-features', '--list-all-groups',
                    '--list-all-nodes', '--list-all-params',
                    '--list-all-subsystems'):
         if action != '' and action != 'list-all':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list-all'
         if option == '--list-all-features':
            list_alls += ['Feature']
         elif option == '--list-all-groups':
            list_alls += ['Group']
         elif option == '--list-all-nodes':
            list_alls += ['Node']
         elif option == '--list-all-params':
            list_alls += ['Parameter']
         elif option == '--list-all-subsystems':
            list_alls += ['Subsystem']
      if option in ('-n', '--nodes'):
         nodes = arg
      if option in ('-p', '--params'):
         params = arg
      if option in ('-P', '--password'):
         passwd = arg
      if option in ('-o', '--port'):
         try:
            port = int(arg)
         except:
            print 'Invalid broker port'
            return(1)
      if option in ('-s', '--subsys'):
         subsys = arg
      if option in ('-U', '--user'):
         username = arg

   if action == '':
      print 'No action specified.  Exiting'
      print_help(argv[0])
      return(1)

   session = Session()
   try:
      if username != '' and passwd != '':
         broker = session.addBroker('amqp://%s/%s@%s:%d' % (username, passwd, broker_ip, port))
      elif username != '':
         broker = session.addBroker('amqp://%s@%s:%d' % (username, broker_ip, port))
      else:
         broker = session.addBroker('amqp://%s:%d' % (broker_ip, port))
   except:
      print 'Unable to connect to broker "%s:%d"' % (broker_ip, port)
      session.delBroker(broker)
      return(1)

   # Retreive the config store object
   try:
      config_store = session.getObjects(_class='Store', _package='com.redhat.grid.config')
   except Exception, error:
      print 'Error: %s' % error
      session.delBroker(broker)
      return(1)

   if config_store == []:
      print 'Unable to contact Configuration Store'
      session.delBroker(broker)
      return(1)
   else:
      config_store = config_store[0]

   # Process the list-alls, if there are any.
   if action == 'list-all':
      for type in list_alls:
         try:
            objs = session.getObjects(_class=type, _package='com.redhat.grid.config')
         except Exception, error:
            print 'Error: %s' % error
            session.delBroker(broker)
            return(1)
         print '\n%ss:' % type
         if type == 'Feature' or type == 'Group':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  name = obj.name
                  if '+++' != name[0:3]:
                     print '  %s' % name
               if type == 'Group':
                  print '  Internal Default Group'
         if  type == 'Node' or type == 'Parameter' or type == 'Subsystem':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  print '  %s' % obj.name
      session.delBroker(broker)
      return(0)

   # First add all the params/nodes/features/etc the user entered on the
   # command line, then edit them if needed.  This is done to address any
   # potential issues with conflicts/depends/includes

   if nodes == '' and params == '' and features == '' and groups == '' and \
      subsys == '':
      print 'No targets provided.  Exiting'
      print_help(argv[0])
      session.delBroker(broker)
      return(1)

   # Process the nodes
   if nodes != '':
      for node in nodes.split(','):
         obj = None
         node = node.strip()
         if action == 'add':
            obj = WallabyHelpers.add_node(session, config_store, node)
         elif action == 'delete':
            if node != '':
               result = config_store.removeNode(node)
               if result.status != 0:
                  print 'Error: Failed to remove node "%s" (%d, %s)' % (node, result.status, result.text)
                  continue
         elif action == 'edit':
            obj = WallabyHelpers.get_node(session, config_store, node)
         elif action == 'list':
            WallabyHelpers.list_node_info(session, config_store, node)
            print

         if obj != None:
            edit_obj = WallabyTypes.Node(node)
            edit_obj.init_from_obj(obj)
            edit_objs += [edit_obj]

   # Process the parameters
   if params != '':
      for param in params.split(','):
         obj = None
         param = param.strip()
         if action == 'add':
            obj = WallabyHelpers.add_param(session, config_store, param)
         elif action == 'delete':
            if param.strip() != '':
               result = config_store.removeParam(param)
               if result.status != 0:
                  print 'Error: Failed to remove parameter "%s" (%d, %s)' % (param, result.status, result.text)
         elif action == 'list':
            WallabyHelpers.list_param_info(session, config_store, param)
            print
         elif action == 'edit':
            obj = WallabyHelpers.get_param(session, config_store, param)

         if obj != None:
            edit_obj = WallabyTypes.Parameter(param)
            edit_obj.init_from_obj(obj)
            edit_objs += [edit_obj]

   # Process the features
   if features != '':
      for feat in features.split(','):
         obj = None
         feat = feat.strip()
         if action == 'add':
            obj = WallabyHelpers.add_feature(session, config_store, feat)
         elif action == 'delete':
            result = config_store.removeFeature(feat)
            if result.status != 0:
               print 'Error: Failed to remove feature "%s" (%d, %s)' % (feat, result.status, result.text)
         elif action == 'list':
            WallabyHelpers.list_feature_info(session, config_store, feat)
            print
         elif action == 'edit':
            obj = WallabyHelpers.get_feature(session, config_store, feat)

         if obj != None:
            edit_obj = WallabyTypes.Feature(feat)
            edit_obj.init_from_obj(obj)
            edit_objs += [edit_obj]

   # Process the groups
   if groups != '':
      for group in groups.split(','):
         group = group.strip()
         if action == 'add':
            if '+++' != group[0:3]:
               WallabyHelpers.add_group(session, config_store, group)
            else:
               print 'Group names beginning with "+++" are reserved and can not be added'
         elif action == 'delete':
            if '+++' != group[0:3]:
               result = config_store.removeGroup(group)
               if result.status != 0:
                  print 'Error: Failed to remove group "%s" (%d, %s)' % (group, result.status, result.text)
            else:
               print 'Group names beginning with "+++" are reserved and can not be deleted'
         elif action == 'list':
            WallabyHelpers.list_group_info(session, config_store, group)
            print

   # Process the subsystems
   if subsys != '':
      for sub in subsys.split(','):
         obj = None
         sub = sub.strip()
         if action == 'add':
            obj = WallabyHelpers.add_subsys(session, config_store, sub)
         elif action == 'delete':
            if sub != '':
               result = config_store.removeSubsys(sub)
               if result.status != 0:
                  print 'Error: Failed to remove subsystem "%s" (%d, %s)' % (sub, result.status, result.text)
         elif action == 'list':
            WallabyHelpers.list_subsys_info(session, config_store, sub)
            print
         elif action == 'edit':
            obj = WallabyHelpers.get_subsys(session, config_store, sub)

         if obj != None:
            edit_obj = WallabyTypes.Subsystem(sub)
            edit_obj.init_from_obj(obj)
            edit_objs += [edit_obj]

   # Now modify the params/features/etc
   if edit_objs != []:
      retry = True
      yaml.add_representer(WallabyTypes.Feature, represent_feature) 
      yaml.add_representer(WallabyTypes.Node, represent_node) 
      yaml.add_representer(WallabyTypes.Parameter, represent_param) 
      yaml.add_representer(WallabyTypes.Subsystem, represent_subsys) 
      yaml.add_representer(unicode, lambda dumper, value: dumper.represent_scalar(u'tag:yaml.org,2002:str', value))
      file = tempfile.NamedTemporaryFile()
      while retry == True:
         retry = False
         file.seek(0, 0)
         file.truncate()
         yaml.dump_all(edit_objs, file, explicit_start=True, default_flow_style=False)

         run_cmd('%s %s' % (os.getenv('EDITOR') or '/bin/vi', file.name), inter=True)
         file.flush()
         file.seek(0, 0)
         try:
            yaml_output = yaml.load_all(file)
         except:
            input = raw_input('Error: Invalid input.  Press <Enter> to correct the errors')
            retry = True
            continue

         # load_all returns a stream, so read its data into a python list we
         # can traverse more than once.  Replace the edit_objs so the changes
         # are preserved
         obj_list = []
         try:
            for entry in yaml_output:
               obj_list += [entry]
         except:
            input = raw_input('Error: Invalid input.  Press <Enter> to correct the errors')
            retry = True
            continue
         edit_objs = obj_list

         # Check for invalid items in the configurations
         invalids = {}
         errors = {}
         ask_for_default = {}
         for edited in edit_objs:
            try:
               edited.store_validate(config_store)
            except WallabyValidateError, error:
               for type in error.invalids.keys():
                  if error.invalids[type] != []:
                     try:
                        invalids[type] = invalids[type] + error.invalids[type]
                     except:
                        invalids[type] = error.invalids[type]
               errors.update(error.errors)
               if error.ask_list != []:
                  ask_for_default[edited] = error.ask_list

         if errors != {}:
            print ' The following errors were reported when checking for configuration validity:'
            for err in errors.key():
               print '  %d: %s' % (err, errors[err])

         if invalids != {}:
            print 'The store does not know about the following items:'
            for type in invalids.keys():
               if invalids[type] != []:
                  print type
                  for item in invalids[type]:
                     print '  %s' % item
            answer = raw_input('Should the above be added to the store [Y/n]? ')
            if answer.lower() != 'n':
               retry = True

               # Add the unknown items into the store
               for type in invalids.keys():
                  for item in invalids[type]:
                     obj = None
                     if type == 'Parameter':
                        obj = WallabyHelpers.add_param(session, config_store, item)
                        if obj != None:
                           edit_obj = WallabyTypes.Parameter(item)
                     elif type == 'Feature':
                        obj = WallabyHelpers.add_feature(session, config_store, item)
                        if obj != None:
                           edit_obj = WallabyTypes.Feature(item)
                     elif type == 'Node':
                        obj = WallabyHelpers.add_node(session, config_store, item)
                        if obj != None:
                           edit_obj = WallabyTypes.Node(item)
                     elif type == 'Group':
                        WallabyHelpers.add_group(session, config_store, item)
                     elif type == 'Subsystem':
                        obj = WallabyHelpers.add_subsys(session, config_store, item)
                        if obj != None:
                           edit_obj = WallabyTypes.Subsystem(item)
                     if obj != None:
                        edit_obj.init_from_obj(obj)
                        edit_objs += [edit_obj]
               continue

         if ask_for_default != {}:
            for obj in ask_for_default.keys():
               for param in sorted(ask_for_default[obj]):
                  answer = raw_input('Use a value for "%s" defined elsewhere in the pool configuration? [Y/n] ' % param)
                  if answer.lower() != 'n':
                     obj.set_use_default_val(param)

         # Make the changes
         for edited in edit_objs:
            if isinstance(edited, WallabyTypes.Parameter):
               obj = WallabyHelpers.get_param(session, config_store, edited.name)
            if isinstance(edited, WallabyTypes.Feature):
               obj = WallabyHelpers.get_feature(session, config_store, edited.name)
            if isinstance(edited, WallabyTypes.Node):
               obj = WallabyHelpers.get_node(session, config_store, edited.name)
            if isinstance(edited, WallabyTypes.Subsystem):
               obj = WallabyHelpers.get_subsys(session, config_store, edited.name)

            try:
               edited.update(obj)
            except WallabyError, error:
               print 'The following errors were reported updating "%s":' % edited.get_name()
               for key in error.errors.keys():
                  print '%s: %s' % (key, error.errors[key])
         file.close()
   session.delBroker(broker)


if __name__ == '__main__':
    sys.exit(main())
