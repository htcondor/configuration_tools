#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
import getopt
import os
import sys
import re
import signal
from qmf.console import Session
from condorqmfconfig.config_utils import *


def exit_signal_handler(signum, frame):
   sys.exit(0)


def print_help(name):
   print 'usage: %s [-h|--help] -b|--broker <broker> [-p|--port <port>] action [-f|--features feature[,feature,...]] [-p|--params param[=1],param2[=string],...] [-n|--nodes hostname,hostname] [-g|--groups group[,group]] [-s|--subsys subsystem[,subsystem]]' % os.path.basename(name)
   print '  <broker> - The ip/hostname of the broker used by the configuration store'
   print '  <port>   - The port of the broker used by the configuration store'
   print '  -h - Print help'
   print '\naction:'
   print '  -a|--add             - Add the target(s) to the store'
   print '  -d|--delete          - Remove the target(s) from the store'
   print '  -e|--edit            - Edit the target(s) in the store'
   print '  -l|--list            - List configuration store information.  If'
   print '                         provided without any targets, lists all'
   print '                         items in the store.  If a target is'
   print '                         provided, print the information for the'
   print '                         provided targets'
   print '  --list-all-features  - List all features in the store'
   print '  --list-all-groups    - List all groups in the store'
   print '  --list-all-nodes     - List all nodes in the store'
   print '  --list-all-params    - List all params in the store'
   print '  --list-all-snapshots - List all snapshots in the store'



#def process_comma_sep_list(list):
#   pairs = {}
#   if list != '':
#      for entry in list.split(','):
#         if entry != '':
#            split = entry.split('=')
#            if len(split) > 1:
#               pairs[split[0].strip()] = split[1].strip()
#            else:
#               pairs[split[0].strip()] = True
#   return pairs


def process_priority_list(list):
   valid = True
   pairs = {}
   for pair in list:
      if pair != '':
         split = pair.split('=')
         if len(split) < 2:
            print 'Error: Invalid input.  "%s" must be assigned a priority' % split[0].strip()
            valid = False
            break
         elif split[1] in pairs:
            print 'Error: The priority "%s" is used twice' % split[1].strip()
            valid = False
            break
         else:
            pairs[split[1].strip()] = split[0].strip()
   return (valid, pairs)


def add_feature(sess, store, name):
   # Add the feature to the store
   print 'Adding feature "%s"' % name
   result = store.AddFeature(name)
   if result.status != 0:
      print 'Error: Failed to add feature "%s" (%d, %s)' % (name, result.status, result.txt)
      return(None)
   else:
      obj = sess.getObjects(_objectId=result.outArgs['obj'])
      if obj != []:
         return(obj[0])
      else:
         return(None)


def modify_feature(obj, name, action):
   # Get the information needed for the feature
   answer = 'y'
   print 'Modifying feature "%s"' % name
   if action == 'edit':
      answer = raw_input('Modify the parameters included in feature "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetParams()
         if result.status != 0:
            print 'Error: Failed to retrieve current parameter list for feature "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current configured parameters:'
            val = result.outArgs['params']
            list = ''
            for key in val.keys():
               print '%s=%s' % (key, val[key])
   if answer.lower() == 'y':
      print 'List of parameters (blank line ends input):'
      list = {}
      input = raw_input('param=value: ')
      while input != '':
         param = input.split('=')
         if len(param) != 2:
            list[param[0].strip()] = False
         else:
            list[param[0].strip()] = param[1].strip()
         input = raw_input('param=value: ')
      result = obj.ModifyParams('replace', list, {})
      if result.status != 0:
          print 'Error: Failed to modify parameters of feature "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features included in feature "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetFeatures()
         if result.status != 0:
            print 'Error: Failed to retrieve current feature list for feature "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current configured features:'
            val = result.outArgs['features']
            list = ''
            for key in val.keys():
               print '%s=%s' % (val[key], key)
   if answer.lower() == 'y':
      valid_input = False
      while valid_input == False:
         print 'Feature names this feature will include (blank line ends input):'
         input = raw_input('feature=priority: ')
         pri_list = []
         while input != '':
            pri_list += ['%s' % input]
            input = raw_input('feature=priority: ')
         (valid_input, list) = process_priority_list(pri_list)
      result = obj.ModifyFeatures('replace', list, {})
      if result.status != 0:
         print 'Error: Failed to modify included features for feature "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features that conflict with feature "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetConflicts()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of conflicts for feature "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current configured feature conflicts:'
            val = result.outArgs['conflicts']
            list = ''
            for key in val.keys():
               print '%s' % key
   if answer.lower() == 'y':
      print 'List of feature names this feature conflicts with (blank line ends input):'
      input = raw_input('conflict: ')
      list = {}
      while input != '':
         list[input.strip()] = True
         input = raw_input('conflict: ')
      result = obj.ModifyConflicts('replace', list, {})
      if result.status != 0:
         print 'Error: Failed to modify conflicts of feature "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features that depend on feature "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetDepends()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of dependencies for feature "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current configured feature dependencies:'
            val = result.outArgs['depends']
            list = ''
            for key in val.keys():
               print '%s=%s' % (val[key], key)
   if answer.lower() == 'y':
      valid_input = False
      while valid_input == False:
         print('Feature names this feature depends on (blank line ends input):')
         input = raw_input('feature=priority: ')
         pri_list = []
         while input != '':
            pri_list += ['%s' % input]
            input = raw_input('feature=priority: ')
         (valid_input, list) = process_priority_list(pri_list)
      result = obj.ModifyDepends('replace', list, {})
      if result.status != 0:
         print 'Error: Failed to modify depends of feature "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the list of subsystems that feature "%s" uses [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetSubsys()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of subsystems for feature "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current configured subsystems:'
            val = result.outArgs['subsystems']
            list = ''
            for key in val.keys():
               print '%s' % key
   if answer.lower() == 'y':
      print('List of subsystems this feature uses (blank line ends input): ')
      input = raw_input('subsystem: ')
      list = {}
      while input != '':
         list[input.strip()] = True
         input = raw_input('subsystem: ')
      result = obj.ModifySubsys('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify subsystem list of feature "%s" (%d, %s)' % (name, result.status, result.txt)


def add_param(sess, store, name):
   print 'Adding parameter "%s"' % name
   result = store.AddParam(name)
   if result.status != 0:
      print 'Error: Failed to add parameter "%s" (%d, %s)' % (name, result.status, result.txt)
      return(None)
   else:
      obj = sess.getObjects(_objectId=result.outArgs['obj'])
      if obj != []:
         return(obj[0])
      else:
         return(None)


def modify_param(obj, name, action):
   # Get the specifics of the parameter
   answer = 'y'
   print 'Modifying parameter "%s"' % name
   if action == 'edit':
      answer = raw_input('Modify the type for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetType()
         if result.status != 0:
            print 'Error: Failed to retrieve type for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['type']
            print 'Current type: %s' % val
   if answer.lower() == 'y':
      value = raw_input('Type: ')
      result = obj.SetType(value)
      if result.status != 0:
         print 'Error: Failed to modify type of parameter "%s" (%d, %s)' % (name, result.status, result.txt)
   
   if action == 'edit':
      answer = raw_input('Modify the default value for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetDefault()
         if result.status != 0:
            print 'Error: Failed to retrieve default value for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['default']
            print 'Current default value: %s' % val
   if answer.lower() == 'y':
      value = raw_input('Default Value: ')
      result = obj.SetDefault(value)
      if result.status != 0:
         print 'Error: Failed to modify default value of parameter "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the description for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetDescription()
         if result.status != 0:
            print 'Error: Failed to retrieve description for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['description']
            print 'Current description: %s' % val
   if answer.lower() == 'y':
      value = raw_input('Description: ')
      result = obj.SetDescription(value)
      if result.status != 0:
         print 'Error: Failed to modify description of "%s" for parameter "%s" (%d, %s)' % (value, name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the DefaultMustChange for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetDefaultMustChange()
         if result.status != 0:
            print 'Error: Failed to retrieve DefaultMustChange for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['mustChange']
            print 'Current DefaultMustChange: %s' % val
   if answer.lower() == 'y':
      value = raw_input('Should this parameter require customization when used [Y/n]? ')
      if value.lower() == 'n':
         result = obj.SetDefaultMustChange(False)
      else:
         result = obj.SetDefaultMustChange(True)
      if result.status != 0:
         print 'Error: Failed to modify DefaultMustChange of parameter "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the expert level for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetVisibilityLevel()
         if result.status != 0:
            print 'Error: Failed to retrieve expert level for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['level']
            print 'Current expert level: %s' % val
   if answer.lower() == 'y':
      valid_input = False
      while valid_input == False:
         valid_input = True
         value = raw_input('Expert level [0]: ')
         if value == '':
            value = 0
         else:
            try:
               junk = int(value)
            except ValueError:
               print 'Error: "%s" is not a valid value' % value
               valid_input = False
      result = obj.SetVisibilityLevel(value)
      if result.status != 0:
         print 'Error: Failed to modify expert level of parameter "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify whether changes to parameter "%s" forces a restart [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetRequiresRestart()
         if result.status != 0:
            print 'Error: Failed to retrieve requires restart for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            val = result.outArgs['needsRestart']
            print 'Current requires restart: %s' % val
   if answer.lower() == 'y':
      value = raw_input('Restart condor when this parameter is changed [y/N]? ')
      if value.lower() == 'y':
         result = obj.SetRequiresRestart(True)
      else:
         result = obj.SetRequiresRestart(False)
      if result.status != 0:
         print 'Error: Failed to modify RequiresRestart of parameter "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify parameter dependencies for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetDepends()
         if result.status != 0:
            print 'Error: Failed to retrieve parameter dependencies for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current parameter dependencies:'
            val = result.outArgs['depends']
            list = ''
            for key in val.keys():
               print '%s' % key
   if answer.lower() == 'y':
      print 'List of parameter names that "%s" depends on (blank line ends input):' % name
      input = raw_input('dependency: ')
      list = {}
      while input != '':
         list[input.strip()] = True
         input = raw_input('dependency: ')
      result = obj.ModifyDepends('replace', list, {})
      if result.status != 0:
         print 'Error: Failed to modify depenecies of parameter "%s" (%d, %s)' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify parameter conflicts for parameter "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetConflicts()
         if result.status != 0:
            print 'Error: Failed to retrieve parameter conflicts for parameter "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current parameter conflicts:'
            val = result.outArgs['conflicts']
            list = ''
            for key in val.keys():
               print '%s' % key
   if answer.lower() == 'y':
      print 'List of parameter names that "%s" conflicts with (blank line ends input): ' % name
      input = raw_input('conflict: ')
      list = {}
      while input != '':
         list[input.strip()] = True
         input = raw_input('conflict: ')
      result = obj.ModifyConflicts('replace', list, {})
      if result.status != 0:
         print 'Error: Failed to modify conflicts of parameter "%s" (%d, %s)' % (name, result.status, result.txt)


def add_group(sess, store, name):
   print 'Adding Group "%s"' % name

   result = store.AddExplicitGroup(name)
   if result.status != 0:
      print 'Error: Failed to add group "%s" (%d, %s)' % (name, result.status, result.txt)
      return(None)
   else:
      obj = sess.getObjects(_objectId=result.outArgs['obj'])
      if obj != []:
         return(obj[0])
      else:
         return(None)


def modify_group(obj, name, action, store, sess):
   print 'Modifying group "%s"' % name
   answer = 'y'
   pre_edit_list = ''
   if action == 'edit':
      answer = raw_input('Modify the node membership of group "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetMembership()
         if result.status != 0:
            print 'Error: Failed to retrieve current node membership for group "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current node membership:'
            val = result.outArgs['nodes']
            pre_edit_list = []
            for key in val.keys():
               pre_edit_list += ['%s' % val[key]]
               print val[key]
   if answer.lower() == 'y':
      print 'Names of nodes included in this group (blank line ends input):'
      input = raw_input('included node: ')
      definition = {}
      while input != '':
         definition[input.strip()] = True
         input = raw_input('included node: ')
      for node in definition.keys():
         node = node.strip()
         should_add = True
         if pre_edit_list != '' and node in pre_edit_list:
            should_add = False
         if should_add == True:
            node_obj = get_node(sess, store, node)
            if node_obj != None:
               result = node_obj.ModifyMemberships('add', {'0':name}, {})
               if result.status != 0:
                  print 'Error: Failed to add node "%s" to group "%s" (%d, %s)' % (node, name, result.status, result.txt)

      if pre_edit_list != '':
         for node in pre_edit_list:
            node = node.strip()
            if node not in definition.keys():
               node_obj = get_node(sess, store, node)
               if node_obj != None:
                  result = node_obj.ModifyMemberships('remove', {'0':name}, {})
                  if result.status != 0:
                     print 'Error: Failed to remove node "%s" to group "%s" (%d, %s)' % (node, name, result.status, result.txt)


def add_node(sess, store, name):
   print 'Adding Node "%s"' % name

   result = store.AddNode(name)
   if result.status != 0:
      print 'Error: Failed to add node "%s" (%d, %s)' % (name, result.status, result.txt)
      return(None)
   else:
      obj = sess.getObjects(_objectId=result.outArgs['obj'])
      if obj != []:
         return(obj[0])
      else:
         return(None)


def add_subsys(sess, store, name):
   print 'Adding subsystem "%s"' % name
   result = store.AddSubsys(name)
   if result.status != 0:
      print 'Error: Failed to add subsystem "%s" (%d, %s)' % (name, result.status, result.txt)
      return(None)
   else:
      obj = sess.getObjects(_objectId=result.outArgs['obj'])
      if obj != []:
         return(obj[0])
      else:
         return(None)


def modify_subsys(obj, name, action):
   # Get the specifics of the subsystem
   answer = 'y'
   print 'Modifying subsystem "%s"' % name
   if action == 'edit':
      answer = raw_input('Modify the parameters included in subsystem "%s" [y/N]? ' % name)
      if answer.lower() == 'y':
         result = obj.GetParams()
         if result.status != 0:
            print 'Error: Failed to retrieve current parameter list for subsystem "%s" (%d, %s)' % (name, result.status, result.txt)
         else:
            print 'Current parameters for the subsystem:'
            val = result.outArgs['params']
            list = ''
            for key in val.keys():
               print '%s=%s' % (key, val[key])
   if answer.lower() == 'y':
      print 'List of parameters affecting subsystem "%s" (blank line ends input):' % name
      input = raw_input('parameter: ')
      list = {}
      while input != '':
         list[input.strip()] = True
         input = raw_input('parameter: ')
      result = obj.ModifyParams('replace', list, {})
      if result.status != 0:
          print 'Error: Failed to modify parameters affecting subsystem "%s" (%d, %s)' % (name, result.status, result.txt)


def main(argv=None):
   if argv is None:
      argv = sys.argv

   broker_ip = ''
   port = '5672'
   action = ''
   features = ''
   groups = ''
   nodes = ''
   params = ''
   subsys = ''
   config_store = []
   list_alls = []
   feat_list = {}
   param_list = {}
   group_list = {}
   node_list = {}
   subsys_list = {}

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'edit', 'features=', 'groups=',
                'help', 'list', 'list-all-features', 'list-all-groups',
                'list-all-nodes', 'list-all-params', 'list-all-subsystems',
                'nodes=', 'params=', 'port=', 'subsys=']
   try:
      opts, args = getopt.getopt(argv[1:], 'ab:def:g:hln:p:o:s:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'delete'
      if option in ('-e', '--edit'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'edit'
      if option in ('-f', '--features'):
         features = arg
      if option in ('-g', '--groups'):
         groups = arg
      if option in ('-h', '--help'):
         print_help(argv[0])
         return(0)
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list'
      if option in ('--list-all-features', '--list-all-groups',
                    '--list-all-nodes', '--list-all-params',
                    '--list-all-subsystems'):
         if action != '' and action != 'list-all':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list-all'
         if option == '--list-all-features':
            list_alls += ['Feature']
         elif option == '--list-all-groups':
            list_alls += ['Group']
         elif option == '--list-all-nodes':
            list_alls += ['Node']
         elif option == '--list-all-params':
            list_alls += ['Parameter']
         elif option == '--list-all-subsystems':
            list_alls += ['Subsystem']
      if option in ('-n', '--nodes'):
         nodes = arg
      if option in ('-p', '--params'):
         params = arg
      if option in ('-o', '--port'):
         port = arg
      if option in ('-s', '--subsys'):
         subsys = arg

   if broker_ip == '':
      print 'No broker specified.  Exiting'
      print_help(argv[0])
      return(0)

   session = Session()
   try:
      broker = session.addBroker('amqp://%s:%s' % (broker_ip, port))
   except:
      print 'Unable to connect to broker "%s"' % broker_ip
      return(1)

   # Retreive the config store object
   config_store = session.getObjects(_class='Store', _package='mrg.grid.config')
   if config_store == []:
      print 'Unable to contact Configuration Store'
   else:
      config_store = config_store[0]

   if config_store == []:
      return(1)

   # Process the list-alls, if there are any.
   if action == 'list-all':
      for type in list_alls:
         objs = session.getObjects(_class=type, _package='mrg.grid.config')
         print '\n%ss:' % type
         if type == 'Feature' or type == 'Group':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  result = obj.GetName()
                  if result.status == 0:
                     name = result.outArgs['name']
                     if '+++' != name[0:3]:
                        print '  %s' % name
         if  type == 'Node' or type == 'Parameter' or type == 'Subsystem':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  print '  %s' % obj.getIndex()
      return(0)

   # First add all the params/nodes/features/etc the user entered on the
   # command line, then edit them if needed.  This is done to address any
   # potential issues with conflicts/depends/includes

   # Process the nodes
   if nodes != '':
      for node in nodes.split(','):
         if action == 'add':
            obj = add_node(session, config_store, node)
            if obj != None:
              node_list[node] = obj
         elif action == 'delete':
            result = config_store.RemoveNode(node)
            if result.status != 0:
               print 'Error: Failed to remove node "%s" (%d, %s)' % (node, result.status, result.text)
               continue
         elif action == 'list':
            list_node_info(session, config_store, node)
            print

   # Process the parameters
   if params != '':
      for param in params.split(','):
         if action == 'add':
            obj = add_param(session, config_store, param)
            if obj != None:
               param_list[param] = obj
         elif action == 'delete':
            result = config_store.RemoveParam(param)
            if result.status != 0:
               print 'Error: Failed to remove parameter "%s" (%d, %s)' % (param, result.status, result.text)
         elif action == 'list':
            list_param_info(session, config_store, param)
            print
         elif action == 'edit':
            obj = get_param(session, config_store, param)
            if obj != None:
               param_list[param] = obj

   # Process the features
   if features != '':
      for feat in features.split(','):
         if action == 'add':
            obj = add_feature(session, config_store, feat)
            if obj != None:
               feat_list[feat] = obj
         elif action == 'delete':
            obj = get_feature(session, config_store, feat)
            if obj != None:
               id = obj.getIndex()
               result = config_store.RemoveFeature(id)
               if result.status != 0:
                  print 'Error: Failed to remove feature "%s" (%d, %s)' % (feat, result.status, result.text)
         elif action == 'list':
            list_feature_info(session, config_store, feat)
            print
         elif action == 'edit':
            obj = get_feature(session, config_store, feat)
            if obj != None:
               feat_list[feat] = obj

   # Process the groups
   if groups != '':
      for group in groups.split(','):
         if action == 'add':
            obj = add_group(session, config_store, group)
            if obj != None:
               group_list[group] = obj
         elif action == 'delete':
            obj = get_group(session, config_store, group)
            if obj != None:
               id = obj.getIndex()
               result = config_store.RemoveGroup(id)
               if result.status != 0:
                  print 'Error: Failed to remove group "%s" (%d, %s)' % (group, result.status, result.text)
         elif action == 'list':
            list_group_info(session, config_store, group)
            print
         elif action == 'edit':
            obj = get_group(session, config_store, group)
            if obj != None:
               group_list[group] = obj

   # Process the subsystems
   if subsys != '':
      for sub in subsys.split(','):
         if action == 'add':
            obj = add_subsys(session, config_store, sub)
            if obj != None:
               subsys_list[sub] = obj
         elif action == 'delete':
            result = config_store.RemoveSubsys(sub)
            if result.status != 0:
               print 'Error: Failed to remove subsystem "%s" (%d, %s)' % (sub, result.status, result.text)
         elif action == 'list':
            list_subsys_info(session, config_store, sub)
            print
         elif action == 'edit':
            obj = get_subsys(session, config_store, sub)
            if obj != None:
               subsys_list[sub] = obj

   # Now modify the params/features/etc

   # Modify the parameters, if needed
   for param in param_list.keys():
      modify_param(param_list[param], param, action)

   # Modify the features, if needed
   for feat in feat_list.keys():
      modify_feature(feat_list[feat], feat, action)

   # Modify the groups, if needed
   for group in group_list.keys():
      modify_group(group_list[group], group, action, config_store, session)

   # Modify the subsystems, if needed
   for sub in subsys_list.keys():
      modify_subsys(subsys_list[sub], sub, action)

if __name__ == '__main__':
    sys.exit(main())
