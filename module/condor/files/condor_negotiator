FLOCK_NEGOTIATOR_HOSTS = $(FLOCK_TO)

##  How often the Negotiator starts a negotiation cycle.
NEGOTIATOR_INTERVAL = 20

##  Negotiator access.  Machines listed here are trusted central
##  managers.
ALLOW_NEGOTIATOR = $(ALLOW_NEGOTIATOR), $(CONDOR_HOST)

## This setting tells the negotiator to ignore user priorities.  This
## avoids problems where jobs from different users won't run when using
## condor_advertise instead of a full-blown startd (some of the user
## priority system in Condor relies on information from the startd --
## we will remove this reliance when we support the user priority
## system for grid sites in the negotiator; for now, this setting will
## just disable it).
#NEGOTIATOR_IGNORE_USER_PRIORITIES = False

## Plugins configuration
NEGOTIATOR.PLUGINS = $(LIB)/plugins/MgmtNegotiatorPlugin-plugin.so

##--------------------------------------------------------------------
##  Settings that control the daemon's debugging output:
##--------------------------------------------------------------------
MAX_NEGOTIATOR_LOG      = 1000000
NEGOTIATOR_DEBUG        = D_MATCH
MAX_NEGOTIATOR_MATCH_LOG = 1000000

######################################################################
##  Daemon-wide settings:
######################################################################
##  Log files
NEGOTIATOR_LOG  = $(LOG)/NegotiatorLog
NEGOTIATOR_MATCH_LOG = $(LOG)/MatchLog

######################################################################
##  Daemon-specific settings:
######################################################################
## Where is the binary?
NEGOTIATOR                      = $(SBIN)/condor_negotiator

##  Daemons you want the master to keep running for you:
DAEMON_LIST = $(DAEMON_LIST), NEGOTIATOR

#####################################################################
##  This where you choose the configuration that you would like to
##  use.  It has no defaults so it must be defined.
######################################################################
##  The rank expressions used by the negotiator are configured below.
##  This is the order in which ranks are applied by the negotiator:
##    1. NEGOTIATOR_PRE_JOB_RANK
##    2. rank in job ClassAd
##    3. NEGOTIATOR_POST_JOB_RANK
##    4. cause of preemption (0=user priority,1=startd rank,2=no preemption)
##    5. PREEMPTION_RANK

##  The NEGOTIATOR_PRE_JOB_RANK expression overrides all other ranks
##  that are used to pick a match from the set of possibilities.
##  The following expression matches jobs to unclaimed resources
##  whenever possible, regardless of the job-supplied rank.
NEGOTIATOR_PRE_JOB_RANK = RemoteOwner =?= UNDEFINED

##  The NEGOTIATOR_POST_JOB_RANK expression chooses between
##  resources that are equally preferred by the job.
##  The following example expression steers jobs toward
##  faster machines and tends to fill a cluster of multi-processors
##  breadth-first instead of depth-first.  In this example,
##  the expression is chosen to have no effect when preemption
##  would take place, allowing control to pass on to
##  PREEMPTION_RANK.
#NEGOTIATOR_POST_JOB_RANK = (RemoteOwner =?= UNDEFINED) * (KFlops - SlotID)

##  The negotiator will not preempt a job running on a given machine
##  unless the PREEMPTION_REQUIREMENTS expression evaluates to true
##  and the owner of the idle job has a better priority than the owner
##  of the running job.  This expression defaults to true.
PREEMPTION_REQUIREMENTS = ( $(StateTimer) > (1 * $(HOUR)) && \
        RemoteUserPrio > SubmittorPrio * 1.2 ) || (MY.NiceUser == True)

##  The PREEMPTION_RANK expression is used in a case where preemption
##  is the only option and all other negotiation ranks are equal.  For
##  example, if the job has no preference, it is usually preferable to
##  preempt a job with a small ImageSize instead of a job with a large
##  ImageSize.  The default is to rank all preemptable matches the
##  same.  However, the negotiator will always prefer to match the job
##  with an idle machine over a preemptable machine, if all other
##  negotiation ranks are equal.
PREEMPTION_RANK         = (RemoteUserPrio * 1000000) - TARGET.ImageSize
