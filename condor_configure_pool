#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import getopt
import os
import sys
import re
import signal
from qmf.console import Session
from condorqmfconfig.config_utils import *


feature_list = {}
group_obj = []


def exit_signal_handler(signum, frame):
   if group_obj != []:
      result = group_obj.RemoveFeatures(feature_list)
      if result.status != 0:
         print 'Error: Problem removing features (%d, %s)' % (result.status, result.text)
   sys.exit(0)


def print_help(name, sess):
   print 'usage: %s [-h|--help] -b|--broker <broker> [-p|--port <port>] [--load-snapshot|--remove-snapshot <snapshot>] [-g|--group|-n|--node name] action [-f|--features feature[,feature,...]] [-p|--params param1,param2,...]' % os.path.basename(name)
   print '  <broker>   - The ip/hostname of the broker used by the configuration store'
   print '  <port>     - The port of the broker used by the configuration store'
   print '  <snapshot> - The name of the snapshot'
   print '  -g - The name of the group to configure'
   print '  -n - The name of the specific node to configure'
   print '  -h - Print help'
   print '\naction:'
   print '  -a|--add             - Add to  the group/node'
   print '  -d|--delete          - Remove from the group/node'
   print '  -l|--list            - List the specific node/group/feature/param'
   print '                         configuration'
   print '  --list-all-features  - List all features in the store'
   print '  --list-all-groups    - List all groups in the store'
   print '  --list-all-nodes     - List all nodes in the store'
   print '  --list-all-params    - List all params in the store'
   print '  --list-all-snapshots - List all snapshots in the store'


def configure_node_schedulers(params):
   response = 'y'

   if raw_input('Modify which schedulers this group can submit to [y/N] ? ').lower() == 'y':
      def_sched = raw_input('Enter the name of the default scheduler: ')
      if def_sched != '':
         if raw_input('Is this a High Available Scheduler [y/N] ? ').lower() == 'y':
            params['SCHEDD_NAME'] = def_sched.split()
         else:
            params['SCHEDD_HOST'] = def_sched.split()
      addl_scheds = raw_input('Enter a comma separated list of additional schedulers that will accept job submissions: ')
      if addl_scheds != '':
         params['HOSTALLOW_WRITE_STARTD'] = addl_scheds.split()
         params['HOSTALLOW_READ_STARTD'] = addl_scheds.split()
         params['HOSTALLOW_WRITE_DAEMON'] = addl_scheds.split()
         params['HOSTALLOW_READ_DAEMON'] = addl_scheds.split()


def configure_qmf_broker(params):
   response = 'y'

   response = raw_input('Change the broker information this group uses to communicate with the Management Console [y/N] ? ')
   if response.lower() == 'y':
      # Remove previous configuration it if exists
      value = raw_input('Enter the hostname of the AMQP broker this group will use to communicate with the Management Console: ')
      params['QMF_BROKER_HOST'] = value.split()

      valid = False
      while valid == False:
         valid = True
         value = raw_input('Enter the port the AMQP broker listens on: ')
         if value != '':
            try:
               junk = int(value)
               params['QMF_BROKER_PORT'] = value.split()
            except ValueError:
               print 'Error: "%s" is not a valid value' % value
               valid = False


def main(argv=None):
   if argv is None:
      argv = sys.argv

   action = ''
   features = ''
   broker_ip = ''
   name = ''
   node = ''
   port = '5672'
   param_list = {}
   group_config = {}
   config_store = []
   session = []
   list_alls = []
   need_print_help = False

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'features=', 'group=', 'help',
                'list', 'list-all-features', 'list-all-groups',
                'list-all-nodes', 'list-all-params', 'list-all-snapshots',
                'load-snapshot=', 'node=', 'params=', 'port=',
                'remove-snapshot']

   try:
      opts, args = getopt.gnu_getopt(argv[1:], 'ab:df:g:hln:p:o:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'remove'
      if option in ('-f', '--features'):
         features = arg
      if option in ('-g', '--group'):
         if node != '':
            print 'Can only configure 1 node or group at a time'
            return(1)
         name = arg
      if option in ('-h', '--help'):
         need_print_help = True
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list'
      if option in ('--list-all-features', '--list-all-groups',
                    '--list-all-nodes', '--list-all-params',
                    '--list-all-snapshots'):
         if action != '' and action != 'list-all':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list-all'
         if option == '--list-all-features':
            list_alls += ['Feature']
         elif option == '--list-all-groups':
            list_alls += ['Group']
         elif option == '--list-all-nodes':
            list_alls += ['Node']
         elif option == '--list-all-params':
            list_alls += ['Parameter']
         elif option == '--list-all-snapshots':
            list_alls += ['Snapshot']
      if option  == '--load-snapshot':
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'load-snapshot'
         snapshot_name = arg
      if option in ('-n', '--node'):
         if name != '':
            print 'Can only configure 1 node or group at a time'
            return(1)
         node = arg
      if option in ('-o', '--port'):
         port = arg
      if option in ('-p', '--params'):
         for param_pair in arg.split(','):
            param_list[param[0]] = False
      if option in ('--remove-snapshot'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'remove-snapshot'
         snapshot_name = arg

   # Connect to the configuration store
   if broker_ip == '':
      if need_print_help == True:
         print_help(argv[0], session)
         return(0)
      print 'No broker specified.  Exiting'
      return(0)

   session = Session()
   try:
      broker = session.addBroker('amqp://%s:%s' % (broker_ip, port))
   except:
      print 'Unable to connect to broker "%s"' % broker_ip
      return(1)

   # Retreive the config store object
   config_store = session.getObjects(_class='Store', _package='mrg.grid.config')
   if config_store == []:
      print 'Unable to contact Configuration Store'
   else:
      config_store = config_store[0]
       
   if need_print_help == True:
      print_help(argv[0], session)
      return(0)

   if config_store == []:
      return(1)

   # Process the list-alls, if there are any.
   if action == 'list-all':
      for type in list_alls:
         objs = session.getObjects(_class=type, _package='mrg.grid.config')
         print '\n%ss:' % type
         if type == 'Feature' or type == 'Group':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  result = obj.GetName()
                  if result.status == 0:
                     name = result.outArgs['name']
                     if '+++' != name[0:3]:
                        print '  %s' % name
         if  type == 'Node' or type == 'Parameter' or type == 'Snapshot':
            if objs == []:
               print '  There are no %ss in the store' % type
            else:
               for obj in objs:
                  print '  %s' % obj.getIndex()
      return(0)

   # Process snapshots
   if action == 'load-snapshot':
      result = config_store.LoadSnapshot(snapshot_name)
      if result.status != 0:
         print 'Error: Failed to load snapshot "%s" (%d %s)' % (snapshot_name, result.status, result.text)
         return(1)
      return(0)
   elif action == 'remove-snapshot':
      result = config_store.RemoveSnapshot(snapshot_name)
      if result.status != 0:
         print 'Error: Failed to remove snapshot "%s" (%d %s)' % (snapshot_name, result.status, result.text)
         return(1)
      return(0)

   # If configuring a single node, grab that node's identity group and
   # act upon that
   if node != '':
      result = config_store.GetNode(node)
      if result.status != 0:
         print 'Error: Unable to get node "%s" from data store (%d, %s)' % (node, result.status, result.text)
         return(1)
      else:
         ref = session.getObjects(_objectId=result.outArgs['obj'])
         if ref == []:
            print 'Error: Unable to find node object with id "%s" (%d, %s)' % (node, result.status, result.text)
         else:
            obj = ref[0]
            result = obj.GetIdentityGroup()
            if result.status != 0:
               print 'Error: Unable to the identity group for node "%s" (%d, %s)' % (node, result.status, result.text)
            else:
               idgroup_ref = session.getObjects(_objectId=result.outArgs['group'])
               if idgroup_ref == []:
                  print 'Error: Unable to find identity group with id "%s" (%d, %s)' % (result.outArgs['obj'], result.status, result.text)
               else:
                  result = idgroup_ref[0].GetName()
                  name = result.outArgs['name']

   # Perform list opertions
   if action == 'list':
      if name != '':
         # Provide the configuration for the group/node
         if node != '':
            list_node_info(session, config_store, node)
         else:
            list_group_info(session, config_store, name)
      if features != '':
         # Provide the configuration for the features
         for feat in features.split(','):
            print 'Configuration for feature %s:' % feat
            list_feature_info(session, config_store, feat)
      for param in param_list.keys():
         list_param_info(session, config_store, param)
            
      return(0)

   if name == '':
      print 'No name supplied.  Exiting'
      print_help(argv[0], session)
   elif action == '':
      print 'No action specified.  Exiting'
      print_help(argv[0], session)
   elif features == '' and param_list == {}:
      print 'No features/parameters specified.  Exiting'
      print_help(argv[0], session)
   else:
      # Query the store to get the group
      group_obj = get_group(session, config_store, name)
      if group_obj == None:
         return(1)

      # Generate the list of features to act upon
      if features != '':
         for feature in features.split(','):
            feature_list[feature] = '0'
         
      # Prompt for param values entered on the command line, if any
      for param in param_list.keys():
         input = raw_input('Value for "%s": ' % param)
         param_list[param] = input.split()

      # Configure which schedulers the node can submit to
      configure_node_schedulers(param_list)

      # Configure the AMQP broker used to communicate with the Management
      # Console
      configure_qmf_broker(param_list)

      if raw_input('\nApply these changes [y/N] ? ').lower() == 'y':
         if feature_list != {}:
            req_params = {}
            result = group_obj.ModifyFeatures(action, feature_list, {})
            if result.status != 0:
               print 'Error: Problem modifying features (%d, %s)' % (result.status, result.text)
               return(1)
#            else:
#               req_params = result.outArgs['params']
#
#            if req_params != {}:
#               print 'The following parameters must be set for this configuration to be valid:'
#               for param in req_params.keys():
#                  print '\nAttribute Name: %s' % param
#                  print 'Reason: %s' % req_params[param]
#                  value = raw_input('Value: ')
#                  param_list[param] = value
                  
         if param_list != {}:
            result = group_obj.ModifyParams(action, param_list, {})
            if result.status != 0:
               print 'Error: Problem modifying parameters (%d, %s)' % (result.status, result.text)
               return(1)
         print 'Configuration applied'

         if raw_input('\nSave this configuration [y/N] ? ').lower() == 'y':
            config_name = raw_input('  Configuration Name: ')
            result = config_store.MakeSnapshot(config_name)
            if result.status != 0:
               print 'Error: Problem saving configuration in store (%d, %s)' % (result.status, result.text)
            else: 
               print 'Configuration saved'

         if raw_input('\nActivate the changes [y/N] ? ').lower() == 'y':
            result = config_store.ActivateConfiguration()
            if result.status != 0:
               print 'Error: Unable to active changes (%d, %s)' % (result.status, result.text)
               requirements = result.outArgs['params']
               print 'These nodes need non-default values to be set for the following parameters:'
               for node in requirements.keys():
                  print 'Node: %s' % node
                  print 'Parameters:'
                  for param in requirements[node].split(','):
                     print '  %s' % param
               return(1)
         else: 
            print 'Configuration activated'
      else:
         print 'Configuration not applied'

if __name__ == '__main__':
    sys.exit(main())
