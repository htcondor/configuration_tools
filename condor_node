#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import sys
import os
import ConfigParser
from qmf.console import Session

def print_config():
   # Print out the node's configuration
   print '---'
   print 'classes:'
   print '  - condor::condor'
   print 'parameters:'
   print '  node_name: %s' % node_name;
   print '  qmf_broker: %s' % config['QMF_BROKER_HOST']
   print '  qmf_port: %s' % config['QMF_BROKER_PORT']
   print '\n'

def main(argv=None):
   if argv is None:
      argv = sys.argv

   dir = '/etc/puppet/modules/condor/files/configs'
   config = '/etc/remote-configuration.conf'
   parser = ConfigParser.ConfigParser()
   node_name = argv[1]
   
   if os.path.exists(config) == False:
      broker_ip = 'localhost'
   else:
      parser.readfp(open(config))
      broker_ip = parser.get('External Nodes', 'qmf_broker')

   session = Session()
   try:
      broker = session.addBroker('amqp://%s' % broker_ip)
   except:
      if os.path.exists('%s/%s' % (dir, node_name)):
         print_config()
         return(0)
      else:
         return(1)

   # Retreive the config store object
   config_store = session.getObjects(_class='store', _package='mrg.grid.config')
   if config_store == []:
      if os.path.exists('%s/%s' % (dir, node_name)):
         print_config()
         return(0)
      else:
         return(1)
   else:
      config_store = config_store[0]

   # Get the node
   result = config_store.GetNode(node_name)
   if result.status != 0:
      # The store doesn't know about the node, so print an empty config
      print '--- {}\n'
      return(0)
   else:
      node = result.outArgs['obj']

   # Retrieve the node's configuration
   result = node.GetConfig()
   if result.status != 0:
      # Problem getting the configuration, so print an empty config
      print '--- {}\n'
      return(0)
   else:
      node_config = result.outArgs['config']

   # Write the config to a file on disk
   config_file = open('%s/%s' % (dir, node_name), 'w')
   for key in node_config.keys():
      config_file.write('%s = %s\n' % key, node_config[key])
   config_file.close()

   print_config()

if __name__ == '__main__':
    sys.exit(main())
