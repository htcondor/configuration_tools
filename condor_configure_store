#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
import getopt
import os
import sys
import re
import signal
from qmf.console import Session

def exit_signal_handler(signum, frame):
   sys.exit(0)

def print_help(name, store):
   print 'usage: %s [-h|--help] -b <broker> action [-f|--features feature[,feature,...]] [-p|--params param=1,param2=string,...] ' % os.path.basename(name)
   print '  <broker> - The ip/hostname of the broker used by the configuration store'
   print '  -h - Print help'
   print '\naction:'
   print '  -a|--add    - Add the feature(s) to the condor node'
   print '  -d|--delete - Remove the feature(s) from the condor node'
   print '  -l|--list   - List configuration store information.  If provided'
   print '                without any features or parameters, lists all'
   print '                features and parameters configured in the store.'
   print '                If a parameter or feature is provided, print the'
   print '                information for that parameter and/or feature'

def initialize_store(store, session):
   # Get all Feature objects and cycle through their parametes.  If an
   # parameter must be set, prompt the user for a value and a feature name
   # and create a new feature
   all_features = session.getObjects(_class="condorconfigfeature", _package="mrg.grid")
   if all_features != []:
      for feature in all_features:
         result = feature.GetParamList()
         if result.status != 0:
            print 'Unable to retrieve attribute list for featureId "%s".' % feature.getIndex()
         else:
            feature_params = result.outArgs['paramList']

            # See if any parameters have a 0 value and if those that do are
            # not allowed to be null.  If they are null, prompt the user
            # for a value
            new_parms = {}
            for key in feature_params.keys():
               if feature_param[key] == 0:
                  # Grab the parameter object
                  result = store.GetParam(key)
                  if result.status != 0:
                     answer = raw_input('Parameter "%s" does not exist.  Create it? [y/N] ' % key)
                     if answer.lower() == 'n':
                        print 'Unable to initialize store.  Exiting'
                     else:
                        # Prompt for all data relevant to a parameter
                        add_param(store, key)
                  else:
                     must_set = False
                     param_obj = result.outArgs['paramObj']
                     result = param_obj.GetDefaultMustChange()
                     if result.status != 0:
                        print 'Error: Unable to determine if parameter "%s" must be set.  Skipping it' % key
                     else:
                        must_set = result.outArgs('paramMustChange')

                     # If the param must be set by the user, then prompt for 
                     # a value
                     if must_set == True:
                        value = raw_input('Value for parameter "%s": ')
                        new_params[key] = value

            # If we have new parameters, great a new feature and have it
            # depend on this feature
            if new_params != {}:
               new_name = raw_input('Enter the name for the new feature: ')
               print 'A new feature will be created with the supplied values'
               result = store.AddFeature(new_name, new_params, key, "", "")
               if result.status != 0:
                  print 'Error: Failed to create new feature named "%s" (%d, %s)' % (new_name, result.status, result.text)
   else:
      print 'Store has no groups.  No initialization required'

def process_param_list(list):
   params = {}
   for pair in list.split(','):
      param = pair.split('=')
      params[param[0]] = param[1]
   return params

def add_feature(store, name):
   # Get the information needed for the feature
   print 'Adding feature "%s"' % name
   name = raw_input('Name: ')
   input = raw_input('Comma separated list of parameters (param=value,param=value): ')
   params = process_param_list(input)
   input = raw_input('Comma separated list of feature Ids and corresponding priority this feature will include (featureId=priority,etc): ')
   adtl_feats = process_param_list(input)
   input = raw_input('Comma separated list of feature Ids and corresponding priority this feature conflicts with (featureId=priority,etc): ')
   conflicts = process_param_list(input)
   input = raw_input('Comma separated list of feature Ids and corresponding priority this feature depends on (featureId=priority,etc): ')
   deps = process_param_list(input)

   # Add the feature to the store
   result = store.AddFeature(name, params, adtl_feats, conflicts, deps)
   if result.status != 0:
      print 'Error: Failed to add feature "%s" (%d, %s)' % (name, result.status, result.txt)

def add_param(store, name):
   # Get the specifics of the parameter
   print 'Adding parameter "%s' % name
   name = raw_input('Name: ')
   type = raw_input('Type: ')
   value = raw_input('Default Value: ')
   default = value
   desc = raw_input('Description: ')
   not_null = raw_input('Should this parameter require customization when used [Y/n]? ')
   if not_null.lower() == 'n':
      not_null = False
   else:
      not_null = True
   expert = raw_input('Expert level [0]: ')
   if expert == '':
      expert = 0
   restart = raw_input('Restart condor when this parameter is changed [y/N]? ')
   if restart.lower() == 'y':
      restart = True
   else:
      restart = False
   deps = raw_input('Comma separated list of other parameter names this parameter depends on: ')
   cons = raw_input('Comma separated list of other parameter names this parameter conflicts with: ')

   # Add the parameter to the store
   result = store.ModifyParam(name, False, type, value, value, default, desc,
                              not_null, expert, restart, deps, cons)
   if result.status != 0:
      print 'Error: Failed to add parameter "%s" (%d, %s)' % (name, result.status, result.txt)

def list_feature_info(store, feature):
   print 'Feature "%s":' % feature
   result = store.GetFeature({'Name': feature})
   if result.status != 0:
      print 'Error: Failed to retrive info for feature "%s" (%d, %s)' % (feature, result.status, result.txt)
   else:
      feat_obj = result.outArgs['featureObj']

      result = feat_obj.GetFeatureId()
      if result.status != 0:
         print 'Error: Failed to retrieve Feature Id (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['featureId']
         print 'Id: %s' % value

      result = feat_obj.GetFeatureName()
      if result.status != 0:
         print 'Error: Failed to retrieve Feature Name (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['featureName']
         print 'Name: %s' % value

      result = feat_obj.GetFeatureList()
      if result.status != 0:
         print 'Error: Failed to retrieve included Features (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['featureList']
         print 'Included Features (featureId, priority):'
         for key in value.keys():
            print '%s, %s' % (key, value[key])

      result = feat_obj.GetParamList()
      if result.status != 0:
         print 'Error: Failed to retrieve included Parameters (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramList']
         print 'Included Parameters:'
         for key in value.keys():
            print '%s = %s' % (key, value[key])

      result = feat_obj.GetConflicts()
      if result.status != 0:
         print 'Error: Failed to retrieve feature Conflicts (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['conflictList']
         print 'Conflicts (featureId, priority):'
         for key in value.keys():
            print '%s, %s' % (key, value[key])

      result = feat_obj.GetDepends()
      if result.status != 0:
         print 'Error: Failed to retrieve feature Dependencies (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['dependList']
         print 'Dependencies (featureId, priority):'
         for key in value.keys():
            print '%s, %s' % (key, value[key])

def list_param_info(store, name):
   print 'Parameter "%s":' % name
   result = store.GetParam(name)
   if result.status != 0:
      print 'Error: Failed to retrive info for parameter "%s" (%d, %s)' % (feature, result.status, result.txt)
   else:
      param_obj = result.outArgs['paramObj']

      result = param_obj.GetName()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Name (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramName']
         print 'Name: %s' % value

      result = param_obj.GetParamType()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Type (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramType']
         print 'Type: %s' % value

      result = param_obj.GetValue()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Value (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramValue']
         print 'Value: %s' % value

      result = param_obj.GetDefault()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Default value (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramDefault']
         print 'Default: %s' % value

      result = param_obj.GetDescription()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Description (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramDesc']
         print 'Description: %s' % value

      result = param_obj.GetDefaultMustChange()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s MustChange (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramMustChange']
         print 'MustChange: %s' % value

      result = param_obj.GetVisibilityLevel()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Visibility Level (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramLevel']
         print 'VisibilityLevel: %s' % value

      result = param_obj.GetRequiresRestart()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Requires Restart (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramNeedsRestart']
         print 'RequiresRestart: %s' % value

      result = param_obj.GetDepends()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Dependencies (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramDepends']
         print 'Dependencies (featureId, priority):'
         for key in value.keys():
            print '%s, %s' % (key, value[key])

      result = param_obj.GetConflicts()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Conflicts (%d, %s)' % (result.status, result.txt)
      else:
         value = result.outArgs['paramConflicts']
         print 'Conflicts (featureId, priority):'
         for key in value.keys():
            print '%s, %s' % (key, value[key])

def main(argv=None):
   if argv is None:
      argv = sys.argv

#   initialize = False
   broker_ip = ""
   action = ''
   features = ''
   param_list = ''
   need_print_help = False
   config_store = []

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'features=', 'help', 'list'
                'params=']
   try:
      opts, args = getopt.getopt(argv[1:], 'ab:df:hlp:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'delete'
      if option in ('-h', '--help'):
         need_print_help = True
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list'

      if option in ('-p', '--params'):
         param_list = arg

   if broker_ip == '':
      if need_print_help == True:
         print_help(argv[0], config_store)
         return(0)
      print 'No broker specified.  Exiting'
      return(0)

   session = Session()
   try:
      broker = session.addBroker("amqp://%s" % broker_ip)
   except:
      print "Unable to connect to broker '%s'" % broker_ip
      return(1)

   # Retreive the config store object
   config_store = session.getObjects(_class="condorconfigstore", _package="mrg.grid")
   if config_store == []:
      print 'Unable to contact Configuration Store'
   else:
      config_store = config_store[0]

   if need_print_help == True:
      print_help(argv[0], config_store)
      return(0)

   if config_store == []:
      return(1)

#   if initialize == True:
#      initialize_store(config_store, session)
#      return(0)

   # If the list action is given without features or parameters, then list
   # the details of all features and parameters in the store
   if action == 'list' and features == '' and param_list == '':
      # First list all features
      store_feats = []
      store_feats = session.getObjects(_class="condorconfigfeature", _package="mrg.grid")
      if store_feats == []:
         print 'There are no features configured in the store'
      else:
         for feat in store_feats:
            id = feat.getIndex()
            result = feat.GetFeatureName()
            if result.status != 0:
               print 'Error: Unable to retrieve feature name for feature id "%s"' % id
            else:
               name = result.outArgs['featureName']
               list_feature_info(config_store, name)

      # Now list all parameters
      store_params = []
      store_params = session.getObjects(_class="condorconfigparameter", _package="mrg.grid")
      if store_params == []:
         print 'There are no parameters configured in the store'
      else:
         for param in store_params:
            id = param.getIndex()
            list_param_info(config_store, id)
      return(0)

   # Process the features
   for feat in features.split(','):
      if action == 'add':
         add_feature(config_store, feat)
      elif action == 'delete':
         result = config_store.GetFeature({'Name': feat})
         if result.status != 0:
            print 'Error: Failed to find feature "%s" (%d, %s)' % (feat, result.status, restult.txt)
            continue
         else:
            feature_obj = result.outArgs['featureObj']
            id = feature_obj.getIndex()
          
         result = config_store.ModifyFeature(id, True, feat, {}, {}, {}, {})
         if result.status != 0:
            print 'Error: Failed to remove feature "%s" (%d, %s)' % (feat, result.status, result.text)
      elif action == 'list':
         list_feature_info(config_store, feat)

   # Process the parameters
   for param in param_list.split(','):
      if action == 'add':
         add_param(config_store, param)
      elif action == 'delete':
         result = config_store.ModifyParam(param, True, 0, "", "", "", False,
                                           0, False, {}, {})
         if result.status != 0:
            print 'Error: Failed to remove parameter "%s" (%d, %s)' % (param, result.status, result.text)
      elif action == 'list':
         list_param_info(config_store, param)

if __name__ == '__main__':
    sys.exit(main())
