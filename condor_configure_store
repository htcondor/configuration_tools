#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
import getopt
import os
import sys
import signal
import yaml
import tempfile
from wallabyclient.exceptions import *
from wallabyclient import WallabyHelpers, WallabyTypes
from condorutils.osutil import run_cmd
from qmf.console import Session


def exit_signal_handler(signum, frame):
   sys.exit(0)


def print_help(name):
   print 'usage: %s [-h|--help] [-b|--broker <broker>] [-o|--port <port>] [-U|--user <user>] [-P|--password <password>] action [-f|--features feature[,feature,...]] [-p|--params param[,param,...]] [-n|--nodes hostname,hostname] [-g|--groups group[,group]] [-s|--subsys subsystem[,subsystem]]' % os.path.basename(name)
   print '  <broker>   - The ip/hostname of the broker used by the configuration store'
   print '  <port>     - The port of the broker used by the configuration store'
   print '  <user>     - The username used to authenticate with the broker'
   print '  <password> - The password used to authenticate with the broker'
   print '  -h|--help  - Print help'
   print '\naction:'
   print '  -a|--add             - Add the target(s) to the store'
   print '  -d|--delete          - Remove the target(s) from the store'
   print '  -e|--edit            - Edit the target(s) in the store'
   print '  -l|--list            - List specific information in the store'
   print '                         about the target(s) provided'
   print '  --list-all-features  - List all features in the store'
   print '  --list-all-groups    - List all groups in the store'
   print '  --list-all-nodes     - List all nodes in the store'
   print '  --list-all-params    - List all params in the store'
   print '  --list-all-subsystems- List all subsystems in the store'


def represent_feature(self, data):
   return self.represent_mapping(u'!Feature', WallabyTypes.print_wallaby_types(data))


def represent_group(self, data):
   return self.represent_mapping(u'!Group', WallabyTypes.print_wallaby_types(data))


def represent_node(self, data):
   return self.represent_mapping(u'!Node', WallabyTypes.print_wallaby_types(data))


def represent_param(self, data):
   return self.represent_mapping(u'!Parameter', WallabyTypes.print_wallaby_types(data))


def represent_subsys(self, data):
   return self.represent_mapping(u'!Subsystem', WallabyTypes.print_wallaby_types(data))


def main(argv=None):
   if argv is None:
      argv = sys.argv

   broker_ip = '127.0.0.1'
   port = 5672
   action = ''
   features = ''
   groups = ''
   nodes = ''
   params = ''
   subsys = ''
   config_store = []
   store_agent = []
   list_alls = []
   edit_objs = []
   username = ''
   passwd = ''

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'edit',
                'features=', 'groups=', 'help', 'list', 'list-all-features',
                'list-all-groups', 'list-all-nodes', 'list-all-params',
                'list-all-subsystems', 'nodes=', 'params=', 'password=',
                'port=', 'subsys=', 'user=']
   try:
      opts, args = getopt.getopt(argv[1:], 'ab:def:g:hln:p:P:o:s:U:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'delete'
      if option in ('-e', '--edit'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'edit'
      if option in ('-f', '--features'):
         features = arg
      if option in ('-g', '--groups'):
         groups += arg
      if option in ('-h', '--help'):
         print_help(argv[0])
         return(0)
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list'
      if option in ('--list-all-features', '--list-all-groups',
                    '--list-all-nodes', '--list-all-params',
                    '--list-all-subsystems'):
         if action != '' and action != 'list-all':
            print 'Only 1 action may be specified'
            return(1)
         action = 'list-all'
         if option == '--list-all-features':
            list_alls += ['Feature']
         elif option == '--list-all-groups':
            list_alls += ['Group']
         elif option == '--list-all-nodes':
            list_alls += ['Node']
         elif option == '--list-all-params':
            list_alls += ['Parameter']
         elif option == '--list-all-subsystems':
            list_alls += ['Subsystem']
      if option in ('-n', '--nodes'):
         nodes = arg
      if option in ('-p', '--params'):
         params = arg
      if option in ('-P', '--password'):
         passwd = arg
      if option in ('-o', '--port'):
         try:
            port = int(arg)
         except:
            print 'Invalid broker port'
            return(1)
      if option in ('-s', '--subsys'):
         subsys = arg
      if option in ('-U', '--user'):
         username = arg

   if action == '':
      print 'No action specified.  Exiting'
      print_help(argv[0])
      return(1)

   if nodes == '' and params == '' and features == '' and groups == '' and \
      subsys == '' and action != 'list-all':
      print 'No targets specified.  Exiting'
      print_help(argv[0])
      return(1)

   session = Session()
   if username != '' and passwd != '':
      broker_str = '%s/%s@%s:%d' % (username, passwd, broker_ip, port)
   elif username != '':
      broker_str = '%s@%s:%d' % (username, broker_ip, port)
   else:
      broker_str = '%s:%d' % (broker_ip, port)

   try:
      broker = session.addBroker('amqp://%s' % broker_str, mechanisms='ANONYMOUS')
   except:
      print 'Unable to connect to broker "%s"' % broker_str
      return(1)

   # Retreive the config store object
   try:
      objs = session.getAgents()
      for agent in objs:
         if agent.label == 'com.redhat.grid.config:Store':
            store_agent = agent
            break
      if store_agent != []:
         config_store = store_agent.getObjects(_class='Store', _package='com.redhat.grid.config')
   except Exception, error:
      print 'Error: %s' % error
      session.delBroker(broker)
      return(1)

   if config_store == []:
      print 'Unable to contact Configuration Store'
      session.delBroker(broker)
      return(1)
   else:
      config_store = config_store[0]

   try:
      # Check API version number
      if config_store.apiVersionNumber < 20100804 or config_store.apiVersionNumber > 20100915:
         print 'The store is using an API version that this tool does not support (%d)' % config_store.apiVersionNumber
         session.delBroker(broker)
         return(1)

      # Process the list-alls, if there are any.
      if action == 'list-all':
         for type in list_alls:
            try:
               objs = store_agent.getObjects(_class=type, _package='com.redhat.grid.config')
            except Exception, error:
               print 'Error: %s' % error
               session.delBroker(broker)
               return(1)
            print '\n%ss:' % type
            if type == 'Feature' or type == 'Group':
               if objs == []:
                  print '  There are no %ss in the store' % type
               else:
                  for obj in objs:
                     name = obj.name
                     if '+++' != name[0:3]:
                        print '  %s' % name
                  if type == 'Group':
                     print '  Internal Default Group'
            if  type == 'Node' or type == 'Parameter' or type == 'Subsystem':
               if objs == []:
                  print '  There are no %ss in the store' % type
               else:
                  for obj in objs:
                     print '  %s' % obj.name
         session.delBroker(broker)
         return(0)
 
      # First add all the params/nodes/features/etc the user entered on the
      # command line, then edit them if needed.  This is done to address any
      # potential issues with conflicts/depends/includes

      if nodes == '' and params == '' and features == '' and groups == '' and \
         subsys == '':
         print 'No targets provided.  Exiting'
         print_help(argv[0])
         session.delBroker(broker)
         return(1)

      # If performing a delete operation, warn before taking any action
      if action == 'delete':
         print 'Warning: About to delete the following entities from the store:'
         if nodes != '':
            print 'Nodes: %s' % nodes
         if groups != '':
            print 'Groups: %s' % groups
         if params != '':
            print 'Parameters: %s' % params
         if features != '':
            print 'Features: %s' % features
         if subsys != '':
            print 'Subsystems: %s' % subsys
         answer = raw_input('Proceed to delete the above entities from the store [y/N]? ')
         if answer.lower() != 'y':
            session.delBroker(broker)
            return(1)

      # Process the nodes
      if nodes != '':
         for node in nodes.split(','):
            obj = None
            node = node.strip()
            if action == 'add' and node != '':
               if '+++' != node[0:3]:
                  obj = WallabyHelpers.add_node(session, config_store, node)
               else:
                  print 'Node names beginning with "+++" are reserved and can not be added'
            elif action == 'delete' and node != '':
               if '+++' != node[0:3]:
                  print 'Removing node "%s"' % node
                  result = config_store.removeNode(node)
                  if result.status != 0:
                     print 'Error: Failed to remove node "%s" (%d, %s)' % (node, result.status, result.text)
                     continue
               else:
                  print 'Node names beginning with "+++" are reserved and can not be deleted'
            elif action == 'edit' and node != '':
               obj = WallabyHelpers.get_node(session, config_store, node)
            elif action == 'list' and node != '':
               WallabyHelpers.list_node_info(session, config_store, node)
               print
 
            if obj != None:
               edit_obj = WallabyTypes.Node(node)
               edit_obj.init_from_obj(obj)
               edit_objs += [edit_obj]

      # Process the parameters
      if params != '':
         for param in params.split(','):
            obj = None
            param = param.strip()
            if action == 'add' and param != '':
               if '+++' != param[0:3]:
                  obj = WallabyHelpers.add_param(session, config_store, param)
               else:
                  print 'Parameter names beginning with "+++" are reserved and can not be added'
            elif action == 'delete' and param != '':
               if '+++' != param[0:3]:
                  print 'Removing parameter "%s"' % param
                  result = config_store.removeParam(param)
                  if result.status != 0:
                     print 'Error: Failed to remove parameter "%s" (%d, %s)' % (param, result.status, result.text)
               else:
                  print 'Parameter names beginning with "+++" are reserved and can not be deleted'
            elif action == 'list' and param != '':
               WallabyHelpers.list_param_info(session, config_store, param)
               print
            elif action == 'edit' and param != '':
               obj = WallabyHelpers.get_param(session, config_store, param)

            if obj != None:
               edit_obj = WallabyTypes.Parameter(param)
               edit_obj.init_from_obj(obj)
               edit_objs += [edit_obj]

      # Process the features
      if features != '':
         for feat in features.split(','):
            obj = None
            feat = feat.strip()
            if action == 'add' and feat != '':
               if '+++' != feat[0:3]:
                  obj = WallabyHelpers.add_feature(session, config_store, feat)
               else:
                  print 'Feature names beginning with "+++" are reserved and can not be added'
            elif action == 'delete' and feat != '':
               if '+++' != feat[0:3]:
                  print 'Removing feature "%s"' % feat
                  result = config_store.removeFeature(feat)
                  if result.status != 0:
                     print 'Error: Failed to remove feature "%s" (%d, %s)' % (feat, result.status, result.text)
               else:
                  print 'Feature names beginning with "+++" are reserved and can not be deleted'
            elif action == 'list' and feat != '':
               WallabyHelpers.list_feature_info(session, config_store, feat)
               print
            elif action == 'edit' and feat != '':
               obj = WallabyHelpers.get_feature(session, config_store, feat)
   
            if obj != None:
               edit_obj = WallabyTypes.Feature(feat)
               edit_obj.init_from_obj(obj)
               edit_objs += [edit_obj]

      # Process the groups
      if groups != '':
         for group in groups.split(','):
            group = group.strip()
            if action == 'add' and group != '':
               if '+++' != group[0:3]:
                  WallabyHelpers.add_group(session, config_store, group)
               else:
                  print 'Group names beginning with "+++" are reserved and can not be added'
            elif action == 'edit' and group != '':
               print 'Groups can not be edited'
               break
            elif action == 'delete' and group != '':
               if '+++' != group[0:3]:
                  print 'Removing group "%s"' % group
                  result = config_store.removeGroup(group)
                  if result.status != 0:
                     print 'Error: Failed to remove group "%s" (%d, %s)' % (group, result.status, result.text)
               else:
                  print 'Group names beginning with "+++" are reserved and can not be deleted'
            elif action == 'list' and group != '':
               WallabyHelpers.list_group_info(session, config_store, group)
               print

      # Process the subsystems
      if subsys != '':
         for sub in subsys.split(','):
            obj = None
            sub = sub.strip()
            if action == 'add' and sub != '':
               if '+++' != sub[0:3]:
                  obj = WallabyHelpers.add_subsys(session, config_store, sub)
               else:
                  print 'Subsystem names beginning with "+++" are reserved and can not be added'
            elif action == 'delete' and sub != '':
               if '+++' != sub[0:3]:
                  print 'Removing subsystem "%s"' % sub
                  result = config_store.removeSubsys(sub)
                  if result.status != 0:
                     print 'Error: Failed to remove subsystem "%s" (%d, %s)' % (sub, result.status, result.text)
               else:
                  print 'Subsystem names beginning with "+++" are reserved and can not be deleted'
            elif action == 'list' and sub != '':
               WallabyHelpers.list_subsys_info(session, config_store, sub)
               print
            elif action == 'edit' and sub != '':
               obj = WallabyHelpers.get_subsys(session, config_store, sub)
 
            if obj != None:
               edit_obj = WallabyTypes.Subsystem(sub)
               edit_obj.init_from_obj(obj)
               edit_objs += [edit_obj]

      # Now modify the params/features/etc
      if edit_objs != []:
         retry = True
         yaml.add_representer(WallabyTypes.Feature, represent_feature) 
         yaml.add_representer(WallabyTypes.Node, represent_node) 
         yaml.add_representer(WallabyTypes.Parameter, represent_param) 
         yaml.add_representer(WallabyTypes.Subsystem, represent_subsys) 
         yaml.add_representer(unicode, lambda dumper, value: dumper.represent_scalar(u'tag:yaml.org,2002:str', value))
         file = tempfile.NamedTemporaryFile()
         while retry == True:
            retry = False
            file.seek(0, 0)
            file.truncate()
            pre_edit_objs = edit_objs
            yaml.dump_all(edit_objs, file, explicit_start=True, default_flow_style=False)
   
            run_cmd('%s %s' % (os.getenv('EDITOR') or '/bin/vi', file.name), inter=True)
            file.flush()
            file.seek(0, 0)
            try:
               yaml_output = yaml.load_all(file)
            except:
               input = raw_input('Error: Invalid input.  Press <Enter> to correct the errors')
               retry = True
               continue

            # load_all returns a stream, so read its data into a python list
            # that can traverse more than once.  Do validation on the input
            # to ensure the user hasn't changed the order of the objects,
            # added objects, removed params, etc.  If eveything checks out,
            # replace the edit_objs so the changes are preserved
            obj_list = []
            total_objs = 0
            try:
               for entry in yaml_output:
                  if total_objs < len(pre_edit_objs) and \
                     entry.__class__ == pre_edit_objs[total_objs].__class__ and \
                     entry.get_name() == pre_edit_objs[total_objs].get_name():
                     try:
                        entry.validate(pre_edit_objs[total_objs])
                     except ValidateWarning, warning:
                        for msg in warning.warnings.keys():
                           print 'WARNING: %s - %s' % (msg, warning.warnings[msg])
                     obj_list += [entry]
                     total_objs += 1
                  else:
                     raw_input('Error: Corrupted object list.  Press <Enter> to re-edit the objects from scratch')
                     retry = True
                     break
            except:
               raw_input('Error: Invalid formatting.  Press <Enter> to start over')
               retry = True
            if retry == True:
               continue

            edit_objs = obj_list

            # Check for invalid items in the configurations
            invalids = {}
            errors = {}
            ask_for_default = {}
            for edited in edit_objs:
               try:
                  edited.store_validate(config_store)
               except WallabyValidateError, error:
                  for type in error.invalids.keys():
                     if error.invalids[type] != []:
                        for item in error.invalids[type]:
                           try:
                              if item not in invalids[type]:
                                 invalids[type] = invalids[type] + [item]
                           except:
                              invalids[type] = error.invalids[type]
                              break
                  errors.update(error.errors)
                  if error.ask_list != []:
                     ask_for_default[edited] = error.ask_list

            if errors != {}:
               print ' The following errors were reported when checking for configuration validity:'
               for err in errors.keys():
                  print '  %d: ' % err,
                  for line in errors[err].split('\\n'):
                     print '%s' % line

            if invalids != {}:
               print 'The store does not know about the following items:'
               for type in invalids.keys():
                  if invalids[type] != []:
                     print type
                     for item in invalids[type]:
                        print '  %s' % item
               answer = raw_input('Should the above be added to the store [Y/n]? ')
               if answer.lower() != 'n':
                  retry = True

                  # Add the unknown items into the store
                  for type in invalids.keys():
                     for item in invalids[type]:
                        obj = None
                        if type == 'Parameter':
                           obj = WallabyHelpers.add_param(session, config_store, item)
                           if obj != None:
                              edit_obj = WallabyTypes.Parameter(item)
                        elif type == 'Feature':
                           obj = WallabyHelpers.add_feature(session, config_store, item)
                           if obj != None:
                              edit_obj = WallabyTypes.Feature(item)
                        elif type == 'Node':
                           obj = WallabyHelpers.add_node(session, config_store, item)
                           if obj != None:
                              edit_obj = WallabyTypes.Node(item)
                        elif type == 'Group':
                           WallabyHelpers.add_group(session, config_store, item)
                        elif type == 'Subsystem':
                           obj = WallabyHelpers.add_subsys(session, config_store, item)
                           if obj != None:
                              edit_obj = WallabyTypes.Subsystem(item)
                        if obj != None:
                           edit_obj.init_from_obj(obj)
                           edit_objs += [edit_obj]
                  continue

            if ask_for_default != {}:
               for obj in ask_for_default.keys():
                  for param in sorted(ask_for_default[obj]):
                     answer = raw_input('Use the default value for "%s" for "%s"? [Y/n] ' % (param, obj.get_name()))
                     if answer.lower() != 'n':
                        obj.set_use_default_val(param)

            # Make the changes
            for edited in edit_objs:
               if isinstance(edited, WallabyTypes.Parameter):
                  obj = WallabyHelpers.get_param(session, config_store, edited.name)
               if isinstance(edited, WallabyTypes.Feature):
                  obj = WallabyHelpers.get_feature(session, config_store, edited.name)
               if isinstance(edited, WallabyTypes.Node):
                  obj = WallabyHelpers.get_node(session, config_store, edited.name)
               if isinstance(edited, WallabyTypes.Subsystem):
                  obj = WallabyHelpers.get_subsys(session, config_store, edited.name)

               try:
                  edited.update(obj)
               except WallabyError, error:
                  print 'The following errors were reported updating "%s":' % edited.get_name()
                  for key in error.errors.keys():
                     print '%d: ' % key,
                     for line in error.errors[key].split('\\n'):
                        print '%s' % line
            file.close()
   except:
      print 'Exception received when communicating with the configuration store'
      print 'This could be because of a communcation issue, or because the'
      print 'configuration store was taking too long to complete a task'
      session.delBroker(broker)
      return(1)

   session.delBroker(broker)
   return(0)

if __name__ == '__main__':
    sys.exit(main())
