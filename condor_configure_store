#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
import getopt
import os
import sys
import re
import signal
from qmf.console import Session

def exit_signal_handler(signum, frame):
   sys.exit(0)


def print_help(name):
   print 'usage: %s [-h|--help] -b <broker> action [-f|--features feature[,feature,...]] [-p|--params param[=1],param2[=string],...] [-n|--nodes hostname,hostname] [-g|--groups name[,name]]\n' % os.path.basename(name)
   print '  <broker> - The ip/hostname of the broker used by the configuration store\n'
   print '  -h - Print help\n'
   print '\naction:\n'
   print '  -a|--add    - Add the target(s) to the store\n'
   print '  -d|--delete - Remove the target(s) from the store\n'
   print '  -e|--edit   - Edit the target(s) in the store\n'
   print '  -l|--list   - List configuration store information.  If provided\n'
   print '                without any targets, lists all items in the store.\n'
   print '                If a target is provided, print the information\n'
   print '                for the provided targets\n'


def process_comma_sep_list(list):
   params = {}
   for pair in list.split(','):
      params[pair[0].lstrip().rstrip()] = True
   return params


def add_feature(store, name):
   # Add the feature to the store
   print 'Adding feature "%s"\n' % name
   result = store.AddFeature(name)
   if result.status != 0:
      print 'Error: Failed to add feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
      return(None)
   return(result.outArgs['obj'])


def get_feature(store, name):
   result = store.GetFeature(name)
   if result.status != 0:
      print 'Error: Failed to find feature "%s" (%d, %s)\n' % (name, result.status, restult.txt)
      return(None)
   else:
      return(result.outArgs['obj'])


def modify_feature(obj, name, action):
   # Get the information needed for the feature
   answer = 'y'
   print 'Modifying feature "%s"\n' % name
   if action == 'edit':
      answer = raw_input('Modify the parameters included in feature "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetParams()
         if result.status != 0:
            print 'Error: Failed to retrieve current parameter list for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current configured parameters:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s=%s,' % (key, params[key])
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('List of parameters (param=value,param=value,etc): ')
      list = {}
      for pair in input.split(','):
         param = pair.split('=')
         list[param[0].lstrip().rstrip()] = param[1].lstrip().rstrip()
      result = obj.ModifyParams('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify parameters of feature "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features included in feature "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetFeatures()
         if result.status != 0:
            print 'Error: Failed to retrieve current feature list for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current configured features:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s=%s,' % (key, params[key])
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('Feature names this feature will include (feature=priority,feature=priority,etc): ')
      for pair in input.split(','):
         param = pair.split('=')
         list[param[0].lstrip().rstrip()] = param[1].lstrip().rstrip()
      result = obj.ModifyFeatures('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify included features for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features that feature "%s" conflicts with [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetConflicts()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of conflicts for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current configured feature conflicts:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s,' % key
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('Comma separated list of feature names this feature conflicts with: ')
      list = process_comma_sep_list(input)
      result = obj.ModifyConflicts('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify conflicts of feature "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the features that feature "%s" depends on [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetDepends()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of dependencies for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current configured feature dependencies:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s=%s,' % (key, params[key])
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('Feature names this feature depends on (feature=priority,feature=priority,etc): ')
      for pair in input.split(','):
         param = pair.split('=')
         list[param[0].lstrip().rstrip()] = param[1].lstrip().rstrip()
      result = obj.ModifyDepends('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify depends of feature "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the list of subsystems that feature "%s" uses [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetSubsys()
         if result.status != 0:
            print 'Error: Failed to retrieve current list of subsystems for feature "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current configured subsystems:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s,' % key
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('Comma separated list of subsystems this feature uses): ')
      list = process_comma_sep_list(input)
      result = obj.ModifySubsys('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify subsystem list of feature "%s" (%d, %s)\n' % (name, result.status, result.txt)


def add_param(store, name):
   print 'Adding parameter "%s"\n' % name
   answer = 'y'
   split = name.split('=')
   result = store.AddParam(split[0])
   if result.status != 0:
      print 'Error: Failed to add parameter "%s" (%d, %s)\n' % (split[0], result.status, result.txt)
      return(None)
   else:
      obj = result.outArgs['obj']
      if split[1] != '':
         result = obj.SetValue(split[1])
         if result.status != 0:
            print 'Error: Failed to set value of parameter "%s" to "%s" (%d, %s)\n' % (split[0], split[1], result.status, result.txt)
      return(obj)
      


def get_param(store, name):
   result = store.GetParam(name)
   if result.status != 0:
      print 'Error: Failed to find parameter "%s" (%d, %s)\n' % (name, result.status, restult.txt)
      return(None)
   else:
      return(result.outArgs['obj'])


def modify_param(obj, name, action):
   # Get the specifics of the parameter
   answer = 'y'
   print 'Modifying parameter "%s"\n' % name
   if action == 'edit':
      answer = raw_input('Modify the type for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetType()
         if result.status != 0:
            print 'Error: Failed to retrieve type for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('type')
            print 'Current type: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Type: ')
      result = store.SetType(value)
      if result.status != 0:
         print 'Error: Failed to modify type of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
   
   if action == 'edit':
      answer = raw_input('Modify the default value for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetDefault()
         if result.status != 0:
            print 'Error: Failed to retrieve default value for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('default')
            print 'Current default value: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Default Value: ')
      result = store.SetDefault(value)
      if result.status != 0:
         print 'Error: Failed to modify default value of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the description for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetDescription()
         if result.status != 0:
            print 'Error: Failed to retrieve description for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('description')
            print 'Current description: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Description: ')
      result = store.SetDescription(value)
      if result.status != 0:
         print 'Error: Failed to modify description of "%s" for parameter "%s" (%d, %s)\n' % (value, name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the DefaultMustChange for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetDefaultMustChange()
         if result.status != 0:
            print 'Error: Failed to retrieve DefaultMustChange for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('mustChange')
            print 'Current DefaultMustChange: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Should this parameter require customization when used [Y/n]? ')
      if value.lower() == 'n':
         result = store.SetDefaultMustChange(False)
      else:
         result = store.SetDefaultMustChange(True)
      if result.status != 0:
         print 'Error: Failed to modify DefaultMustChange of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify the expert level for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetVisibilityLevel()
         if result.status != 0:
            print 'Error: Failed to retrieve expert level for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('level')
            print 'Current expert level: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Expert level [0]: ')
      if value == '':
         value = 0
      result = store.SetVisibilityLevel(value)
      if result.status != 0:
         print 'Error: Failed to modify expert level of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify whether changes to parameter "%s" forces a restart [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetRequiresRestart()
         if result.status != 0:
            print 'Error: Failed to retrieve requires restart for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            val = results.outArgs('needsRestart')
            print 'Current requires restart: %s\n' % val
   if answer.lower() = 'y':
      value = raw_input('Restart condor when this parameter is changed [y/N]? ')
      if value.lower() == 'y':
         result = store.SetRequiresRestart(True)
      else:
         result = store.SetRequiresRestart(False)
      if result.status != 0:
         print 'Error: Failed to modify RequiresRestart of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify parameter dependencies for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetDepends()
         if result.status != 0:
            print 'Error: Failed to retrieve parameter dependencies for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current parameter dependencies:\n'
            val = results.outArgs('depends')
            list = ''
            for key in val.keys():
               list += '%s=%s,' % (key, params[key])
            print list[:-1]
   if answer.lower() = 'y':
      value = raw_input('Other parameter names this parameter depends on (param=priority,param=priority): ')
      list = process_comma_sep_list(value)
      result = store.ModifyDepends('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify depenecies of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)

   if action == 'edit':
      answer = raw_input('Modify parameter conflicts for parameter "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetConflicts()
         if result.status != 0:
            print 'Error: Failed to retrieve parameter conflicts for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current parameter conflicts:\n'
            val = results.outArgs('conflicts')
            list = ''
            for key in val.keys():
               list += '%s,' % key
            print list[:-1]
   if answer.lower() = 'y':
      value = raw_input('Comma separated list of other parameter names this parameter conflicts with: ')
      list = process_comma_sep_list(value)
      result = store.ModifyConflicts('replace', list)
      if result.status != 0:
         print 'Error: Failed to modify conflicts of parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)


def add_group(store, name):
   print 'Adding Group "%s"\n' % name

   result = store.AddExplicitGroup(name)
   if result.status != 0:
      print 'Error: Failed to add group "%s" (%d, %s)\n' % (name, result.status, result.txt)
      return(None)
   return(result.outArgs['obj'])


def get_group(store, name):
   result = store.GetGroup({'Name': name})
   if result.status != 0:
      print 'Error: Failed to find group "%s" (%d, %s)\n' % (name, result.status, restult.txt)
      return(None)
   else:
      return(result.outArgs['obj'])


def modify_group(obj, name, action):
   print 'Modifying group "%s"\n' % name
   if action == 'edit':
      answer = raw_input('Modify the node membership of group "%s" [Y/n] ?' % name)
      if answer == '':
         answer = 'y'
         result = obj.GetMembership()
         if result.status != 0:
            print 'Error: Failed to retrieve current node membership for group "%s" (%d, %s)\n' % (name, result.status, result.txt)
         else:
            print 'Current node membership:\n'
            val = results.outArgs('list')
            list = ''
            for key in val.keys():
               list += '%s,' % key
            print list[:-1]
   if answer.lower() = 'y':
      input = raw_input('Names of nodes included in this group (comma separated): ')
      definition = process_comma_sep_list(input)
      result = obj.ModifyMembership('replace', definition, {})
      if result.status != 0:
         print 'Error: Failed to modify node membership of group "%s" (%d, %s)\n' % (name, result.status, result.txt)


def modify_node(store, name, action):
   pool = raw_input('Pool: ')

   if action == 'add':
      result = store.AddNode(name, pool)
   elif action == 'edit':
      result = store.ModifyNode(name, pool)
   if result.status != 0:
      print 'Error: Failed to add/modify node "%s" (%d, %s)\n' % (name, result.status, result.txt)


def list_feature_info(store, feature):
   print 'Feature "%s":\n' % feature
   result = store.GetFeature(feature)
   if result.status != 0:
      print 'Error: Failed to retrive info for feature "%s" (%d, %s)\n' % (feature, result.status, result.txt)
   else:
      feat_obj = result.outArgs['obj']

      value = feat_obj.getIndex()
      print 'Id: %s\n' % value

      result = feat_obj.GetName()
      if result.status != 0:
         print 'Error: Failed to retrieve Feature Name (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['name']
         print 'Name: %s\n' % value

      result = feat_obj.GetFeatures()
      if result.status != 0:
         print 'Error: Failed to retrieve included Features (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['list']
         print 'Included Features (featureId, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])

      result = feat_obj.GetParams()
      if result.status != 0:
         print 'Error: Failed to retrieve included Parameters (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['list']
         print 'Included Parameters:\n'
         for key in value.keys():
            print '%s = %s\n' % (key, value[key])

      result = feat_obj.GetConflicts()
      if result.status != 0:
         print 'Error: Failed to retrieve feature Conflicts (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['list']
         print 'Conflicts (featureId, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])

      result = feat_obj.GetDepends()
      if result.status != 0:
         print 'Error: Failed to retrieve feature Dependencies (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['list']
         print 'Dependencies (featureId, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])


def list_param_info(store, name):
   print 'Parameter "%s":\n' % name
   result = store.GetParam(name)
   if result.status != 0:
      print 'Error: Failed to retrive info for parameter "%s" (%d, %s)\n' % (name, result.status, result.txt)
   else:
      param_obj = result.outArgs['obj']

      result = param_obj.GetName()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Name (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['name']
         print 'Name: %s\n' % value

      result = param_obj.GetType()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Type (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['type']
         print 'Type: %s\n' % value

      result = param_obj.GetValue()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Value (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['value']
         print 'Value: %s\n' % value

      result = param_obj.GetDefault()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Default value (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['default']
         print 'Default: %s\n' % value

      result = param_obj.GetDescription()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Description (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['description']
         print 'Description: %s\n' % value

      result = param_obj.GetDefaultMustChange()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s MustChange (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['mustChange']
         print 'MustChange: %s\n' % value

      result = param_obj.GetVisibilityLevel()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Visibility Level (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['level']
         print 'VisibilityLevel: %s\n' % value

      result = param_obj.GetRequiresRestart()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Requires Restart (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['needsRestart']
         print 'RequiresRestart: %s\n' % value

      result = param_obj.GetDepends()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Dependencies (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['depends']
         print 'Dependencies (featureId, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])

      result = param_obj.GetConflicts()
      if result.status != 0:
         print 'Error: Failed to retrieve parameter\'s Conflicts (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['conflicts']
         print 'Conflicts (featureId, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])


def list_group_info(store, group):
   print 'Group "%s":\n' % group
   result = store.GetGroup({'Name':group})
   if result.status != 0:
      print 'Error: Failed to retrive info for group "%s" (%d, %s)\n' % (group, result.status, result.txt)
   else:
      group_obj = result.outArgs['obj']

      value = group_obj.getIndex()
      print 'Id: %s\n' % value

      result = feat_obj.GetName()
      if result.status != 0:
         print 'Error: Failed to retrieve group name (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['name']
         print 'Name: %s\n' % value

      result = group_obj.GetMembership()
      if result.status != 0:
         print 'Error: Failed to retrieve group membership (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['list']
         print 'Members (hostname, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])

      result = group_obj.GetFeatureSet()
      if result.status != 0:
         print 'Error: Failed to retrieve group features (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['features']
         print 'Features (name, priority):\n'
         for key in value.keys():
            print '%s, %s\n' % (key, value[key])

      result = group_obj.GetParams()
      if result.status != 0:
         print 'Error: Failed to retrieve group parameters (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['params']
         print 'Parameters:\n'
         for key in value.keys():
            print '%s = %s\n' % (key, value[key])


def list_node_info(store, name):
   print 'Name: %s' % name
   result = store.GetNode(name)
   if result.status != 0:
      print 'Error: Failed to retrive info for node "%s" (%d, %s)\n' % (name, result.status, result.txt)
   else:
      node_obj = result.outArgs['obj']

      result = node_obj.GetPool()
      if result.status != 0:
         print 'Error: Failed to retrieve pool (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['pool']
         print 'Pool: %s' % value

      result = node_obj.GetLastCheckinTime()
      if result.status != 0:
         print 'Error: Failed to retrieve LastCheckinTime (%d, %s)\n' % (result.status, result.txt)
      else:
         value = result.outArgs['time']
         print 'Last Check-in Time: %d' % value

      result = node_obj.GetConfig()
      if result.status != 0:
         print 'Error: Failed to retrieve configuration (%d, %s)\n' % (result.status, result.txt)
      else:
         print 'Configuration:'
         value = result.outArgs['config']
         for key in value.keys():
            print '%s = %s' % (key, value[key])


def main(argv=None):
   if argv is None:
      argv = sys.argv

   broker_ip = ''
   action = ''
   features = ''
   groups = ''
   nodes = ''
   params = ''
   group_list = ''
   config_store = []
   feat_list = {}
   parm_list = {}

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)

   long_opts = ['add', 'broker=', 'delete', 'edit', 'features=', 'groups=',
                'help', 'list', 'nodes=', 'params=']
   try:
      opts, args = getopt.getopt(argv[1:], 'ab:def:g:hln:p:', long_opts)
   except getopt.GetoptError, error:
      print str(error)
      return(1)

   for option, arg in opts:
      if option in ('-a', '--add'):
         if action != '':
            print 'Only 1 action may be specified\n'
            return(1)
         action = 'add'
      if option in ('-b', '--broker'):
         broker_ip = arg
      if option in ('-d', '--delete'):
         if action != '':
            print 'Only 1 action may be specified\n'
            return(1)
         action = 'delete'
      if option in ('-e', '--edit'):
         if action != '':
            print 'Only 1 action may be specified\n'
            return(1)
         action = 'edit'
      if option in ('-f', '--features'):
         features = arg
      if option in ('-g', '--groups'):
         groups = arg
      if option in ('-h', '--help'):
         print_help(argv[0])
         return(0)
      if option in ('-l', '--list'):
         if action != '':
            print 'Only 1 action may be specified\n'
            return(1)
         action = 'list'
      if option in ('-n', '--nodes'):
         nodes = arg
      if option in ('-p', '--params'):
         params = arg

   if broker_ip == '':
      print 'No broker specified.  Exiting\n'
      print_help(argv[0])
      return(0)

   session = Session()
   try:
      broker = session.addBroker('amqp://%s' % broker_ip)
   except:
      print 'Unable to connect to broker "%s"\n' % broker_ip
      return(1)

   # Retreive the config store object
   config_store = session.getObjects(_class='store', _package='mrg.grid.config')
   if config_store == []:
      print 'Unable to contact Configuration Store\n'
   else:
      config_store = config_store[0]

   if config_store == []:
      return(1)

   # If the list action is given without features or parameters, then list
   # the details of all features and parameters in the store
   if action == 'list' and features == '' and params == '':
      # List all nodes
      store_nodes = []
      store_nodes = session.getObjects(_class='node', _package='mrg.grid.config')
      if store_nodes == []:
         print 'There are no nodes configured in the store\n'
      else:
         for node in store_nodes:
            name = node.getIndex()
            list_node_info(config_store, name)

      # List all groups
      store_groups = []
      store_groups = session.getObjects(_class='group', _package='mrg.grid.config')
      if store_groups == []:
         print 'There are no groups configured in the store\n'
      else:
         for group in store_groups:
            id = group.getIndex()
            result = group.GetName()
            if result.status != 0:
               print 'Error: Unable to retrieve group name for group id "%s"\n' % id
            else:
               name = result.outArgs['name']
               list_group_info(config_store, name)

      # List all parameters
      store_params = []
      store_params = session.getObjects(_class='parameter', _package='mrg.grid.config')
      if store_params == []:
         print 'There are no parameters configured in the store\n'
      else:
         for param in store_params:
            id = param.getIndex()
            list_param_info(config_store, id)

      # List all features
      store_feats = []
      store_feats = session.getObjects(_class='feature', _package='mrg.grid.config')
      if store_feats == []:
         print 'There are no features configured in the store\n'
      else:
         for feat in store_feats:
            id = feat.getIndex()
            result = feat.GetFeatureName()
            if result.status != 0:
               print 'Error: Unable to retrieve feature name for feature id "%s"\n' % id
            else:
               name = result.outArgs['name']
               list_feature_info(config_store, name)

      return(0)

   # First add all the params/nodes/features/etc the user entered on the
   # commandline, then edit them if needed.  This is done to address any
   # potential issues with conflicts/depends/includes

   # Process the nodes
   for node in nodes.split(','):
      if action == 'add':
         print 'Adding Node "%s"\n' % name
         modify_node(config_store, node, action)
      elif action == 'delete':
         result = config_store.RemoveNode(node)
         if result.status != 0:
            print 'Error: Failed to remove node "%s" (%d, %s)\n' % (feat, result.status, result.text)
            continue
      elif action == 'list':
         list_node_info(config_store, node)
      elif action == 'edit':
         print 'Modifying Node "%s"\n' % name
         modify_node(config_store, node, action)

   # Process the parameters
   for param in params.split(','):
      if action == 'add':
         obj = add_param(config_store, param)
         if obj != None:
            param_list[param] = obj
      elif action == 'delete':
         result = config_store.RemoveParam(param)
         if result.status != 0:
            print 'Error: Failed to remove parameter "%s" (%d, %s)\n' % (param, result.status, result.text)
      elif action == 'list':
         list_param_info(config_store, param)
      elif action == 'edit':
         split = param.split('=')
         obj = get_param(config_store, split[0])
         if obj != None:
            result = obj.SetValue(split[1])
            if result.status != 0:
               print 'Error: Failed to modify value of parameter "%s" to "%s" (%d, %s)\n' % (split[0], split[1], result.status, result.text)
            param_list[split[0]] = obj

   # Process the features
   for feat in features.split(','):
      if action == 'add':
         obj = add_feature(config_store, feat)
         if obj != None:
            feat_list[feat] = obj
      elif action == 'delete':
         obj = get_feature(config_store, feat)
         if obj != None:
            id = obj.getIndex()
            result = config_store.RemoveFeature(id)
            if result.status != 0:
               print 'Error: Failed to remove feature "%s" (%d, %s)\n' % (feat, result.status, result.text)
      elif action == 'list':
         list_feature_info(config_store, feat)
      elif action == 'edit':
         obj = get_feature(config_store, feat)
         if obj != None:
            feat_list[feat] = obj

   # Process the groups
   for group in groups.split(','):
      if action == 'add':
         obj = add_group(config_store, group)
         if obj != None:
            group_list[group] = obj
      elif action == 'delete':
         obj = get_group(config_store, group)
         if obj != None:
            id = obj.getIndex()
            result = config_store.RemoveGroup(id)
            if result.status != 0:
               print 'Error: Failed to remove group "%s" (%d, %s)\n' % (group, result.status, result.text)
      elif action == 'list':
         list_group_info(config_store, group)
      elif action == 'edit':
         obj = get_group(config_store, group)
         if obj != None:
            group_list[group] = obj

   # Now modify the params/features/etc

   # Modify the parameters, if needed
   for param in param_list.keys():
      modify_param(param_list[param], param, action)

   # Modify the features, if needed
   for feat in feat_list.keys():
      modify_feature(feat_list[param], feat, action)

   # Modify the groups, if needed
   for group in group_list.keys():
      modify_group(group_list[param], group, action)

if __name__ == '__main__':
    sys.exit(main())
