#!/usr/bin/python
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import os
import sys
import syslog
import signal
import time
import socket
from qmf.console import Session, Console
from jobhooks.functions import *


class EventConsole(Console):
   def __init__(self):
      self.node = []


   def config(self, obj):
      self.node = obj


   def event(self, broker, event):
      if event.getClassKey().getClassName() == 'RestartEvent':
         args = event.getArguments()
         affected_hosts = args['AffectedNodes'].split(',')
         if self.node.getIndex() in affected_hosts:
            get_config(self.node)
            if args['Restart'] == True:
               cmd = 'condor_restart'
            else:
               cmd = 'condor_reconfig'

            targets = args['Targets'].values()[0]
            for subsys in targets.split(','):
               if subsys == 'carod':
                  (retval, out, err) = run_cmd('condor_restart', '-subsystem %s' % subsys)
               else:
                  (retval, out, err) = run_cmd(cmd, '-subsystem %s' % subsys)
               if retval != 0:
                  syslog.syslog(syslog.LOG_ERR, 'Error: Failed to send command to subsystem "%s" (stdout: %s, stderr: %s)' % (subsys, out, err))
      elif event.getClassKey().getClassName() == 'NewConfigEvent':
#         print dir(event)
#         args = event.getArguments()
#         affected_hosts = args['nodelist']
#         if self.node.getIndex() in affected_hosts.keys():
         if True:
            get_config(self.node)
            (retval, out, err) = run_cmd('condor_restart', '-subsystem master')
            if retval != 0:
               syslog.syslog(syslog.LOG_ERR, 'Error: Failed to send command to subsystem "master" (stdout: %s, stderr: %s)' % (out, err))


class Service:
   def __init__(self):
      self.broker_ip = ''
      self.broker_port = 5672
      self.broker = None
      self.console = None
      self.session = None
      self.store = []
      self.interval = 0
      self.node_obj = []


   def init(self):
      self.console = EventConsole()
      self.session = Session(self.console, manageConnections=False, rcvObjects=False, rcvHeartbeats=False, rcvEvents=True)


   def config(self):
      if self.broker != None:
         self.session.delBroker(self.broker)
         self.broker = None

      if self.store != []:
         self.store = []

      try:
         val = read_condor_config('QMF_BROKER', ['HOST'])
         self.broker_ip = val['host']
      except config_err, error:
         # Broker host not defined, so exit
         syslog.syslog(syslog.LOG_ERR, 'Error: %s.  Exiting' % error.msg)
         return(False)

      try:
         val = read_condor_config('QMF_BROKER', ['PORT'])
         self.broker_port = val['port']
      except config_err, error:
         syslog.syslog(syslog.LOG_INFO, '%s. Using default (5672)' % error.msg)
         self.broker_port = 5672

      try:
         val = read_condor_config('QMF_CONFIG', ['CHECK_INTERVAL'])
         self.interval = val['check_interval']
      except config_err, error:
         syslog.syslog(syslog.LOG_INFO, '%s. Node configuration evaluation disabled' % error.msg)
         self.interval = 0
       
      try:
         self.broker = self.session.addBroker('amqp://%s:%s' % (self.broker_ip, self.broker_port))
      except:
         syslog.syslog(syslog.LOG_ERR, 'Error: Unable to connect to broker "%s"' % self.broker_ip)
         return(False)

      obj = self.session.getObjects(_class='Store', _package='mrg.grid.config')
      if obj == []:
         syslog.syslog(syslog.LOG_ERR, 'Failed to contact configuration store.  Exiting')
         return(False)

      self.store = obj[0]
      result = self.store.GetNode(os.uname()[1])
      if result.status != 0:
         syslog.syslog('Error(%d, %s): Store does not know about this node' % (result.status, result.txt))
         return(False)
      else:
         obj = self.session.getObjects(_objectId=result.outArgs['obj'])
         if obj == []:
            syslog.syslog('Error: Unable to get node information object')
            return(False)
         else:
            self.node_obj = obj[0]
      self.console.config(self.node_obj)
      self.check_config_ver()

      # Setup the alarm for evaluation
      signal.alarm(0)
      if self.interval > 0:
         signal.alarm(self.interval)

      return(True)


   def shutdown(self):
      if self.broker != None:
         self.session.delBroker(self.broker)
         self.broker = None


   def get_interval(self):
      return self.interval


   def check_config_ver(self):
      if self.node_obj == []:
         return(1)

      try:
         val = read_condor_config('WALLABY_CONFIG', ['VERSION'])
         version = int(val['version'])
      except config_err, error:
         # Never been configured before, so send a bank version
         version = 0
      if version != self.node_obj.last_updated_version:
         get_config(self.node_obj)


def get_config(node_obj):
   # Retrieve the node's configuration
   result = node_obj.GetConfig()
   if result.status != 0:
      # Problem getting the configuration, so do nothing
      syslog.syslog(syslog.LOG_ERR, 'Error: Failed to retrieve configuration from the store (%d, %s)' % (result.status, result.text))
      return
   else:
      config = result.outArgs['config']

   # Write the config to a file on disk
   try:
      loc = read_condor_config('LOCAL_CONFIG', ['DIR'])
   except:
      syslog.syslog(syslog.LOG_ERR, 'Error: LOCAL_CONFIG_DIR not defined.  Unable to write config')
      return

   config_file = open('%s/qmf_condor_config' % loc['dir'], 'w')
   for key in config.keys():
      config_file.write('%s = %s\n' % (key, config[key]))
   config_file.close()

#   node_obj.CheckIn()


def reconfig(signum, frame):
   service.config()
#   signal.alarm(service.get_interval())


def exit_signal_handler(signum, frame):
   service.shutdown()
   del service
   sys.exit(0)


def config_check():
   service.check_config_ver()


service = Service()
def main(argv=None):
   if argv is None:
      argv = sys.argv

   # Open a connection to the system logger
   syslog.openlog(os.path.basename(argv[0]))

   # Set signal handlers
   signal.signal(signal.SIGINT, exit_signal_handler)
   signal.signal(signal.SIGTERM, exit_signal_handler)
   signal.signal(signal.SIGHUP, reconfig)
   signal.signal(signal.SIGALRM, config_check)

   # Retrieve the broker information from condor's configuration file
   service.init()
   if service.config() != True:
      return(1)

   # Loop forever until told to shutdown
   try:
      while True:
         time.sleep(1)
   except:
      pass

if __name__ == '__main__':
    sys.exit(main())
