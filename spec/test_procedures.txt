condor_configure_store:
Adding Parameters:
1) Add a parameter
condor_configure_store -a -p depend-param
Result:
--- !Parameter
conflicts: []
default: '0'
depends: []
description: 'This is a param to be depended upon'
level: 0
must_change: false
name: depend-param
restart: false
type: integer

2) Add multiple parameters
condor_configure_store -a -p conflict-param,include-param,param1,param2,param3
--- !Parameter
conflicts: []
default: '$(BOB)'
depends: []
description: 'A param to conflict with'
level: 0
must_change: false
name: conflict-param
restart: false
type: string
--- !Parameter
conflicts: []
default: '4.324'
depends: []
description: 'A param used in included features'
level: 0
must_change: false
name: include-param
restart: true
type: float
--- !Parameter
conflicts: []
default: 'This value will not exist'
depends: []
description: 'A must change parameter'
level: 1
must_change: true
name: param1
restart: false
type: string
--- !Parameter
conflicts: []
default: ''
depends: []
description: ''
level: 0
must_change: false
name: param2
restart: true
type: string
--- !Parameter
conflicts: []
default: ''
depends: []
description: ''
level: 0
must_change: false
name: param3
restart: false
type: string

condor_configure_store -l -p param1
Result:
Parameter "param1":
Name: param1
Type: string
Default: 
Description: A must change parameter
MustChange: True
VisibilityLevel: 1
RequiresRestart: False
Dependencies:
Conflicts:

3) Add a parameter with a conflict
condor_configure_store -a -p param4
Result:
--- !Parameter
conflicts: 
- conflict-param
default: ''
depends: []
description: ''
level: 0
must_change: false
name: param4
restart: false
type: string

4) Add a parameter with a dependency
condor_configure_store -a -p param5
Result:
--- !Parameter
conflicts: []
default: ''
depends: 
- depend-param
description: ''
level: 0
must_change: false
name: param5
restart: false
type: string

5) Add a parameter with non-existing dependency and conflict
condor_configure_store -a -p complex-param
Result:
--- !Parameter
conflicts: 
- non-exhistant-conflict
default: ''
depends: 
- non-exhistant-depend
description: 'A complex param'
level: 0
must_change: false
name: complex-param
restart: false
type: string

The store does not know about the following items:
Parameter
  non-exhistant-depend
  non-exhistant-conflict
Should the above be added to the store [Y/n]? y

--- !Parameter
conflicts:
- non-exhistant-conflict
default: ''
depends:
- non-exhistant-depend
description: A complex param
level: 0
must_change: false
name: complex-param
restart: false
type: string
--- !Parameter
conflicts: []
default: ''
depends: []
description: ''
level: 0
must_change: false
name: non-exhistant-depend
restart: false
type: string
--- !Parameter
conflicts: []
default: ''
depends: []
description: ''
level: 0
must_change: false
name: non-exhistant-conflict
restart: false
type: string

6) Verify all params are in the store:
condor_configure_store --list-all-params
Result:
Parameters:
  depend-param
  conflict-param
  include-param
  param1
  param2
  param3
  param4
  param5
  complex-param
  non-exhistant-depend
  non-exhistant-conflict


Adding Features:
1) Add a feature
condor_configure_store -a -f depend-feature
Result:
--- !Feature
conflicts: []
depends: []
includes: []
name: depend-feature
params: 
  depend-param: 0
  param1: This is a string
subsys: []

2) Add multiple features
condor_configure_store -a -f conflict-feature,include-feature,feature1,feature2
Result:
--- !Feature
conflicts: []
depends: []
includes: []
name: conflict-feature
params:
  conflict-param: Conflicting string
subsys: []
--- !Feature
conflicts: []
depends: []
includes: []
name: include-feature
params: 
  include-param: '4.11111'
subsys: []
--- !Feature
conflicts: []
depends: []
includes: []
name: feature1
params: {}
subsys: []
--- !Feature
conflicts: []
depends: []
includes: []
name: feature2
params: {}
subsys: []

3) Add a feature with a conflict
condor_configure_store -a -f feature3
Result:
--- !Feature
conflicts: 
- conflict-feature
depends: []
includes: []
name: feature3
params: {}
subsys: []

4) Add a feature with a dependency
condor_configure_store -a -f feature4
Result:
--- !Feature
conflicts: []
depends: 
- depend-feature
includes: []
name: feature4
params: {}
subsys: []

5) Add a feature that includes another feature
condor_configure_store -a -f feature5
--- !Feature
conflicts: []
depends: []
includes: 
- include-feature
name: feature5
params: {}
subsys: []

6) Add a feature with non-existing dependency, conflict, and parameter
condor_configure_store -a -f complex-feature
Result:
--- !Feature
conflicts: 
- non-exhistant-conflict
depends: 
- non-exhistant-depend
includes: 
- non-exhistant-include
name: complex-feature
params: 
  non-exhistant-param2: This is a value
subsys: []

The store does not know about the following items:
Parameter
  non-exhistant-param2
Feature
  non-exhistant-include
  non-exhistant-conflict
  non-exhistant-depend
Should the above be added to the store [Y/n]? y

--- !Feature
conflicts:
- non-exhistant-conflict
depends:
- non-exhistant-depend
includes:
- non-exhistant-include
name: complex-feature
params:
  non-exhistant-param2: This is a value
subsys: []
--- !Parameter
conflicts: []
default: ''
depends: []
description: ''
level: 0
must_change: false
name: non-exhistant-param2
restart: false
type: string
--- !Feature
conflicts: []
depends: []
includes: []
name: non-exhistant-include
params: {}
subsys: []
--- !Feature
conflicts: []
depends: []
includes: []
name: non-exhistant-conflict
params: {}
subsys: []
--- !Feature
conflicts: []
depends: []
includes: []
name: non-exhistant-depend
params: {}
subsys: []

7) Verify all features/params are in the store
condor_configure_store --list-all-features --list-all-params
Result:
Features:
  depend-feature
  conflict-feature
  include-feature
  feature1
  feature2
  feature3
  feature4
  feature5
  complex-feature
  non-exhistant-include
  non-exhistant-conflict
  non-exhistant-depend

Parameters:
  depend-param
  conflict-param
  include-param
  param2
  param3
  param4
  param5
  complex-param
  non-exhistant-depend
  non-exhistant-conflict
  param1
  non-exhistant-param2


Add Nodes:
1) Add a node
condor_configure_store -a -n node1
Result:
Adding Node "node1"

2) Add multiple nodes
condor_configure_store -a -n node2,node3,node4,node5,node6,node7
Result:
Adding Node "node2"
Adding Node "node3"
Adding Node "node4"
Adding Node "node5"
Adding Node "node6"
Adding Node "node7"

3) Show all nodes in the store:
condor_configure_store --list-all-nodes
Result:
Nodes:
  node1
  node2
  node3
  node4
  node5
  node6
  node7


Add Subsystems:
1) Add a subsystem
condor_configure_store -a -s subsys1
Result:
--- !Subsystem
name: subsys1
params: 
- param1
- param2

2) Add multiple subsystems
condor_configure_store -a -s subsys2,subsys3,subsys4,subsys5
Result:
--- !Subsystem
name: subsys2
params: 
- param3
- param4
--- !Subsystem
name: subsys3
params: 
- param5
- complex-param
--- !Subsystem
name: subsys4
params: []
--- !Subsystem
name: subsys5
params: []

3) List all subsystems
condor_configure_store --list-all-subsystems
Result:
Subsystems:
  subsys1
  subsys2
  subsys3
  subsys4
  subsys5


Add Groups:
1) Add a group
condor_configure_store -a -g group1
Result:
--- !Group
members: 
- node1
- node2
name: group1

2) Add multiple groups
condor_configure_store -a -g group2,group3,group4
Result:
--- !Group
members: 
- node3
- node4
name: group2
--- !Group
members: 
- node1
- node3
- node5
name: group3
--- !Group
members: 
- node2
- node4
- node6
name: group4

3) List all groups in the store
condor_configure_store --list-all-groups
Result:
Groups:
  group1
  group2
  group3
  group4
  Internal Default Group


Edit/List Objects:
1) Edit/List a feature
condor_configure_store -e -f feature1
Result:
--- !Feature
conflicts: []
depends: []
includes: []
name: feature1
params: 
  param2: '1'
subsys: []

condor_configure_store -l -f feature1
Result:
Feature "feature1":
Feature ID: 4
Name: feature1
Included Parameters:
  param2 = 1
Included Features:
Conflicts:
Dependencies (order: featureName):
Subsystems:

2) Edit/List multiple features
condor_configure_store -e -f feature1,complex-feature
Result:
--- !Feature
conflicts: []
depends: []
includes: []
name: feature1
params:
  param2: '2'
subsys: []
--- !Feature
conflicts:
- non-exhistant-conflict
depends:
- non-exhistant-depend
includes:
- non-exhistant-include
name: complex-feature
params:
  non-exhistant-param2: This is a value
  param1: A string
subsys: []

condor_configure_store -l -f feature1,complex-feature
Result:
Feature "feature1":
Feature ID: 4
Name: feature1
Included Parameters:
  param2 = 2
Included Features:
Conflicts:
Dependencies (order: featureName):
Subsystems:

Feature "complex-feature":
Feature ID: 9
Name: complex-feature
Included Parameters:
  param1 = A string
  non-exhistant-param2 = This is a value
Included Features:
  0: non-exhistant-include
Conflicts:
  non-exhistant-conflict
Dependencies (order: featureName):
  0: non-exhistant-depend
Subsystems:

3) Edit/List a group
condor_configure_store -e -g group1
Result:
--- !Group
members:
- node1
- node2
- node3
name: group1

condor_configure_store -l -g group1
Result:
Group "group1":
Group ID: 9
Name: group1
Members:
  node1
  node2
  node3
Features (priority: name):
Parameters:

4) Edit/List multiple groups
condor_configure_store -e -g group1,group2
Result:
--- !Group
members:
- node1
- node3
name: group1
--- !Group
members:
- node3
- node4
- node2
name: group2

condor_configure_store -l -g group1,group2
Result:
Group "group1":
Group ID: 9
Name: group1
Members:
  node1
  node3
Features (priority: name):
Parameters:

Group "group2":
Group ID: 10
Name: group2
Members:
  node3
  node4
  node2
Features (priority: name):
Parameters:

5) Edit/List a param
condor_configure_store -e -p param1
Result:
--- !Parameter
conflicts: []
default: ''
depends: []
description: New description
level: 1
must_change: true
name: param1
restart: false
type: string

condor_configure_store -l -p param1
Result:
Parameter "param1":
Name: param1
Type: string
Default: 
Description: New description
MustChange: True
VisibilityLevel: 1
RequiresRestart: False
Dependencies:
Conflicts:

6) Edit/List multiple params
condor_configure_store -e -p param1,complex-param
Result:
--- !Parameter
conflicts: []
default: ''
depends: []
description: New description
level: 1
must_change: true
name: param1
restart: true
type: string
--- !Parameter
conflicts:
- non-exhistant-conflict
default: 'Complex param default value'
depends:
- non-exhistant-depend
description: A complex param
level: 0
must_change: false
name: complex-param
restart: false
type: string

condor_configure_store -l -p param1,complex-param
Result:
Parameter "param1":
Name: param1
Type: string
Default: 
Description: New description
MustChange: True
VisibilityLevel: 1
RequiresRestart: True
Dependencies:
Conflicts:

Parameter "complex-param":
Name: complex-param
Type: string
Default: Complex param default value
Description: A complex param
MustChange: False
VisibilityLevel: 0
RequiresRestart: False
Dependencies:
  non-exhistant-depend
Conflicts:
  non-exhistant-conflict

7) Edit/List a subsystem
condor_configure_store -e -s subsys1
Result:
--- !Subsystem
name: subsys1
params:
- param1
- param2
- param3

condor_configure_store -l -s subsys1
Result:
Subsystem "subsys1":
Included Parameters:
  param1
  param2
  param3

8) Edit/List multiple subsystems
condor_configure_store -e -s subsys1,subsys2
Result:
--- !Subsystem
name: subsys1
params:
- param2
- param3
--- !Subsystem
name: subsys2
params:
- param1
- param4

condor_configure_store -l -s subsys1,subsys2
Result:
Subsystem "subsys1":
Included Parameters:
  param2
  param3

Subsystem "subsys2":
Included Parameters:
  param1
  param4


condor_configure_pool:
1) Add/Delete feature to default group
condor_configure_pool --default-group -a -f feature1
Result:
Apply these changes [Y/n] ? y
Configuration applied

Save this configuration [y/N] ? n

Activate the changes [y/N] ? n
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: feature1
Parameters:

condor_configure_pool --default-group -a -f feature1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

2) Add/Delete multiple features to the default group
condor_configure_pool --default-group -a -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? y
Configuration applied

Save this configuration [y/N] ? n

Activate the changes [y/N] ? n
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: complex-feature
  1: feature2
Parameters:

condor_configure_pool --default-group -d -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

3) Add parameter to the default group
condor_configure_pool --default-group -a -p param1
Result:
Value for "param1": Pool given value

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:
  param1 = Pool given value

condor_configure_pool --default-group -d -p param1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

4) Add/Delete multiple parameters to the default group
condor_configure_pool --default-group -a -p complex-param,param3
Result:
Value for "complex-param": pool value for complex param
Value for "param3": pool value for param3

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:
  param3 = pool value for param3
  complex-param = pool value for complex param

condor_configure_pool --default-group -d -p complex-param,param3
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

5) Add/Delete feature to a group
condor_configure_pool -g group1 -a -f feature1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group1 -l
Result:
Group "group1":
Group ID: 9
Name: group1
Members:
  node1
  node3
Features (priority: name):
  0: feature1
Parameters:

condor_configure_pool -g group1 -d -f feature1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group1 -l
Result:
Group "group1":
Group ID: 9
Name: group1
Members:
  node1
  node3
Features (priority: name):
Parameters:

6) Add/Delete multiple features to a group
condor_configure_pool -g group2 -a -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group2 -l
Result:
Group "group2":
Group ID: 10
Name: group2
Members:
  node3
  node4
  node2
Features (priority: name):
  0: complex-feature
  1: feature2
Parameters:

condor_configure_pool -g group2 -d -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group2 -l
Result:
Group "group2":
Group ID: 10
Name: group2
Members:
  node3
  node4
  node2
Features (priority: name):
Parameters:

7) Add/Delete parameter to a group
condor_configure_pool -g group3 -a -p param1
Result:
Value for "param1": pool value for param1

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group3 -l
Result:
Group "group3":
Group ID: 11
Name: group3
Members:
  node1
  node3
  node5
Features (priority: name):
Parameters:
  param1 = pool value for param1

condor_configure_pool -g group3 -d -p param1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group3 -l
Result:
Group "group3":
Group ID: 11
Name: group3
Members:
  node1
  node3
  node5
Features (priority: name):
Parameters:

8) Add/Delete multiple parameters to a group
condor_configure_pool -g group3 -a -p param2,param3
Result:
Value for "param2": pool param2
Value for "param3": pool param3

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group3 -l
Result:
Group "group3":
Group ID: 11
Name: group3
Members:
  node1
  node3
  node5
Features (priority: name):
Parameters:
  param3 = pool param3
  param2 = pool param2

condor_configure_pool -g group3 -d -p param2,param3
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -g group3 -l
Result:
Group "group3":
Group ID: 11
Name: group3
Members:
  node1
  node3
  node5
Features (priority: name):
Parameters:

9) Add/Delete feature to a node
condor_configure_pool -n node1 -a -f feature1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node1 -l
Result:
Node "node1":
Last Check-in Time: Never
Group Memberships:
  group1
  group3
  Internal Default Group
Features Applied:
  feature1
Configuration:
  WALLABY_CONFIG_VERSION = 0
  param2 = 2

condor_configure_pool -n node1 -d -f feature1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node1 -l
Result:
Node "node1":
Last Check-in Time: Never
Group Memberships:
  group1
  group3
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0

10) Add/Delete multiple features to a node
condor_configure_pool -n node2 -a -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node2 -l
Result:
Node "node2":
Last Check-in Time: Never
Group Memberships:
  group4
  group2
  Internal Default Group
Features Applied:
  complex-feature
  feature2
Configuration:
  WALLABY_CONFIG_VERSION = 0
  param3 = string
  param1 = A string
  non-exhistant-param2 = This is a value

condor_configure_pool -n node2 -d -f complex-feature,feature2
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node2 -l
Result:
Node "node2":
Last Check-in Time: Never
Group Memberships:
  group4
  group2
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0

11) Add/Delete parameter to a node
condor_configure_pool -n node3 -a -p param1
Result:
Value for "param1": pool given param 1

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node3 -l
Result:
Node "node3":
Last Check-in Time: Never
Group Memberships:
  group2
  group3
  group1
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0
  param1 = pool given param 1

condor_configure_pool -n node3 -d -p param1
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node3 -l
Result:
Node "node3":
Last Check-in Time: Never
Group Memberships:
  group2
  group3
  group1
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0

12) Add/Delete multiple parameters to a node
condor_configure_pool -n node4 -a -p param2,param3
Result:
Value for "param2": pool given param2
Value for "param3": pool given param3

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node4 -l
Result:
Node "node4":
Last Check-in Time: Never
Group Memberships:
  group2
  group4
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0
  param3 = pool given param3
  param2 = pool given param2

condor_configure_pool -n node4 -d -p param2,param3
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool -n node4 -l
Result:
Node "node4":
Last Check-in Time: Never
Group Memberships:
  group2
  group4
  Internal Default Group
Features Applied:
Configuration:
  WALLABY_CONFIG_VERSION = 0

Snapshots:
1) Take a snapshot
condor_configure_pool --take-snapshot "Base"
Result:
Configuration saved

condor_configure_pool --list-all-snapshots
Result:
Snapshots:
  Base

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

2) Take a snapshot by configuring an object
condor_configure_pool --default-group -a -f complex-feature
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? y
  Configuration Name: Configured
Configuration saved

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: complex-feature
Parameters:

condor_configure_pool --list-all-snapshots
Result:
Snapshots:
  Base
  Configured

3) Load the Base snapshot
condor_configure_pool --load-snapshot "Base"
Result:
Snapshot loaded

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

4) Load the Configured snapshot
condor_configure_pool --load-snapshot "Configured"
Result:
Snapshot loaded

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: complex-feature
Parameters:

5) Remove the snapshots
condor_configure_pool --remove-snapshot "Configured"
Result:
Snapshot removed

condor_configure_pool --list-all-snapshots
Result:
Snapshots:
  Base

condor_configure_pool --remove-snapshot "Base"
Result:
Snapshot removed

condor_configure_pool --list-all-snapshots
Result:
Snapshots:
  There are no Snapshots in the store


List objects in the store:
1) List all features
condor_configure_pool --list-all-features
Result:
Features:
  non-exhistant-depend
  non-exhistant-include
  feature1
  conflict-feature
  non-exhistant-conflict
  feature2
  include-feature
  complex-feature
  feature3
  feature4
  feature5
  depend-feature

2) List all groups
condor_configure_pool --list-all-groups
Result:
Groups:
  group1
  group2
  group3
  group4
  Internal Default Group

3) List all nodes
condor_configure_pool --list-all-nodes
Result:
Nodes:
  node4
  node5
  node6
  node7
  node1
  node2
  node3

4) List all params
condor_configure_pool --list-all-params
Result:
Parameters:
  non-exhistant-param2
  non-exhistant-depend
  param1
  complex-param
  param2
  depend-param
  non-exhistant-conflict
  param3
  param4
  conflict-param
  param5
  include-param


Activation:
1) Test activation failure
condor_configure_pool --activate
Result:
The configuration is not valid
Node: node1
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node3
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node2
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node5
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node4
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node7
Unsatisfied feature dependencies:
  non-exhistant-depend

Node: node6
Unsatisfied feature dependencies:
  non-exhistant-depend

Configuration not activated

2) Valid activate:
condor_configure_pool --default-group -d -f complex-feature
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --activate
Result:
Configuration activated


Delete entities from the store:
1) Delete a parameter
condor_configure_store -d -p param1
condor_configure_store --list-all-params
Result:
Parameters:
  non-exhistant-param2
  non-exhistant-depend
  complex-param
  param2
  depend-param
  non-exhistant-conflict
  param3
  param4
  conflict-param
  param5
  include-param

2) Delete multiple parameters
condor_configure_store -d -p param2,param3,param4,param5
condor_configure_store --list-all-params
Result:
Parameters:
  non-exhistant-param2
  non-exhistant-depend
  complex-param
  depend-param
  non-exhistant-conflict
  conflict-param
  include-param

3) Delete a group
condor_configure_store -d -g group1
condor_configure_store --list-all-groups
Result:
Groups:
  group2
  group3
  group4
  Internal Default Group

4) Delete multiple groups
condor_configure_store -d -g group2,group3,group4
condor_configure_store --list-all-groups
Result:
Groups:
  Internal Default Group

5) Delete a node
condor_configure_store -d -n node1
condor_configure_store --list-all-nodes
Result:
Nodes:
  node4
  node5
  node6
  node7
  node2
  node3

6) Delete multiple nodes
condor_configure_store -d -n node2,node3,node4,node5,node6
condor_configure_store --list-all-nodes
Result:
Nodes:
  node7

7) Delete a subsystem
condor_configure_store -d -s subsys1
condor_configure_store --list-all-subsys
Result:
Subsystems:
  subsys2
  subsys3
  subsys4
  subsys5

8) Delete multiple subsystems
condor_configure_store -d -s subsys2,subsys3,subsys4
condor_configure_store --list-all-subsys
Result:
Subsystems:
  subsys5


Special Cases:
To run these procedures, make sure the db is loaded with the default snapshot
from the condor-wallaby-base-db package.

1) Configure scheduler information
condor_configure_pool --default-group -a --schedds
Result:
Enter the name of the default scheduler: test
Is this a High Available Scheduler [y/N] ? 

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:
  SCHEDD_HOST = test

2) Configure broker information
condor_configure_pool --default-group -a --qmfbroker
Result:
Enter the hostname of the AMQP broker this group will use to communicate with
the Management Console: 127.0.0.1
Enter the port the AMQP broker listens on: 

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:
  SCHEDD_HOST = test
  QMF_BROKER_HOST = 127.0.0.1

3) Configure both
condor_configure_pool --default-group -a --schedds --qmfbroker
Result:
Enter the name of the default scheduler: ha-test
Is this a High Available Scheduler [y/N] ? y
Enter the hostname of the AMQP broker this group will use to communicate with
the Management Console: 1.1.1.1
Enter the port the AMQP broker listens on: 2345

Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:
  QMF_BROKER_HOST = 1.1.1.1
  SCHEDD_NAME = ha-test
  QMF_BROKER_PORT = 2345

4) Remove the QMF and Scheduler params
condor_configure_pool --default-group -d --schedds --qmfbroker
Result:
Apply these changes [Y/n] ? 
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
Parameters:

5) Configure VMUniverse and EC2Enhanced
condor_configure_pool --default-group -a -f VMUniverse,EC2Enhanced
Result:
Apply these changes [Y/n] ? 
Enable EC2 routing to the Small AMI type [y/N] ? y
Enter a filename containing an AWS Public Key for this route: a
Enter a filename containing an AWS Private Key for this route: a
Enter a filename containing an AWS Access Key for this route: a
Enter a filename containing an AWS Secret Key for this route: a
Enter a filename containing an RSA Public Key for this route: a
Enter an S3 Storage Bucket name for this route: a
Enter an SQS Queue name for this route: a
Enter an AMI ID for use with this route: a
Enable EC2 routing to the High-Compute Medium AMI type [y/N] ? 
Enable EC2 routing to the High-Compute Extra Large AMI type [y/N] ? 
Enable EC2 routing to the XLarge AMI type [y/N] ? 
Enable EC2 routing to the Large AMI type [y/N] ? 
Type of Virtual Machines to run on this node (xen or kvm): xen
Enable networking in the VM universe [y/N] ? y
Supported VM networking type (nat, bridge, both): both
Default VM networking type (nat or bridge): bridge
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: VMUniverse
  1: EC2Enhanced
Parameters:
  XEN_BOOTLOADER = /usr/bin/pygrub
  JOB_ROUTER_ENTRIES = $(JOB_ROUTER_ENTRIES) [ GridResource = "condor
localhost $(COLLECTOR_HOST)"; Name = "Amazon Small";
requirements=target.WantAWS is true && (target.Universe is vanilla ||
target.Universe is 5) && (target.WantArch is "INTEL" || target.WantArch is
UNDEFINED) && (target.WantCpus <= 1 || target.WantCpus is UNDEFINED) &&
(target.WantMemory < 1.7 || target.WantMemory is UNDEFINED) &&
(target.WantDisk < 160 || target.WantDisk is UNDEFINED); set_gridresource =
"amazon"; set_amazoninstancetype = "m1.small"; set_remote_jobuniverse = 5;
set_amazonpublickey = "a"; set_amazonprivatekey = "a"; set_amazonaccesskey =
"a"; set_amazonsecretkey = "a"; set_rsapublickey = "a"; set_amazons3bucketname
= "a"; set_amazonsqsqueuename = "a"; set_amazonamiid = "a"; ]
  VM_TYPE = xen
  VM_NETWORKING_TYPE = nat, bridge
  VM_NETWORKING = TRUE
  NEED_SET_EC2E_ROUTES = FALSE
  VM_NETWORKING_DEFAULT_TYPE = bridge

6) Re-Configure VMUniverse and EC2Enhanced
condor_configure_pool --default-group -a -f VMUniverse,EC2Enhanced
Result:
Apply these changes [Y/n] ? y
Enable EC2 routing to the Small AMI type [y/N] ? n
Enable EC2 routing to the High-Compute Medium AMI type [y/N] ? y
Enter a filename containing an AWS Public Key for this route: b
Enter a filename containing an AWS Private Key for this route: b
Enter a filename containing an AWS Access Key for this route: b
Enter a filename containing an AWS Secret Key for this route: b
Enter a filename containing an RSA Public Key for this route: b
Enter an S3 Storage Bucket name for this route: b
Enter an SQS Queue name for this route: b
Enter an AMI ID for use with this route: b
Enable EC2 routing to the High-Compute Extra Large AMI type [y/N] ? 
Enable EC2 routing to the XLarge AMI type [y/N] ? 
Enable EC2 routing to the Large AMI type [y/N] ? 
Type of Virtual Machines to run on this node (xen or kvm): kvm
Enable networking in the VM universe [y/N] ? n
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: VMUniverse
  1: EC2Enhanced
Parameters:
  NEED_SET_EC2E_ROUTES = FALSE
  VM_BRIDGE_SCRIPT = /etc/xen/scripts/network-bridge start bridge=xenbr0
  JOB_ROUTER_ENTRIES = $(JOB_ROUTER_ENTRIES) [ GridResource = "condor
localhost $(COLLECTOR_HOST)"; Name = "Amazon High-CPU Medium";
requirements=target.WantAWS is true && (target.Universe is vanilla ||
target.Universe is 5) && (target.WantArch is "INTEL" || target.WantArch is
UNDEFINED) && ((target.WantCpus > 1 && target.WantCpus <= 5) ||
(target.WantDisk > 160 && target.WantDisk <= 350)); set_gridresource =
"amazon"; set_amazoninstancetype = "c1.medium"; set_remote_jobuniverse = 5;
set_amazonpublickey = "b"; set_amazonprivatekey = "b"; set_amazonaccesskey =
"b"; set_amazonsecretkey = "b"; set_rsapublickey = "b"; set_amazons3bucketname
= "b"; set_amazonsqsqueuename = "b"; set_amazonamiid = "b"; ]
  VM_TYPE = kvm
  VM_NETWORKING = FALSE

7) Only enable 1 type of networking for VMUniverse
condor_configure_pool --default-group -a -f VMUniverse
Result:
Apply these changes [Y/n] ? 
Type of Virtual Machines to run on this node (xen or kvm): kvm
Enable networking in the VM universe [y/N] ? y
Supported VM networking type (nat, bridge, both): nat
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: EC2Enhanced
  1: VMUniverse
Parameters:
  VM_BRIDGE_SCRIPT = /etc/xen/scripts/network-bridge start bridge=xenbr0
  JOB_ROUTER_ENTRIES = $(JOB_ROUTER_ENTRIES) [ GridResource = "condor
localhost $(COLLECTOR_HOST)"; Name = "Amazon High-CPU Medium";
requirements=target.WantAWS is true && (target.Universe is vanilla ||
target.Universe is 5) && (target.WantArch is "INTEL" || target.WantArch is
UNDEFINED) && ((target.WantCpus > 1 && target.WantCpus <= 5) ||
(target.WantDisk > 160 && target.WantDisk <= 350)); set_gridresource =
"amazon"; set_amazoninstancetype = "c1.medium"; set_remote_jobuniverse = 5;
set_amazonpublickey = "b"; set_amazonprivatekey = "b"; set_amazonaccesskey =
"b"; set_amazonsecretkey = "b"; set_rsapublickey = "b"; set_amazons3bucketname
= "b"; set_amazonsqsqueuename = "b"; set_amazonamiid = "b"; ]
  VM_TYPE = kvm
  VM_NETWORKING_TYPE = nat
  NEED_SET_EC2E_ROUTES = FALSE
  VM_NETWORKING = TRUE

7) Enable the other type of networking for VMUniverse
condor_configure_pool --default-group -a -f VMUniverse
Result:
Apply these changes [Y/n] ? 
Type of Virtual Machines to run on this node (xen or kvm): kvm
Enable networking in the VM universe [y/N] ? y
Supported VM networking type (nat, bridge, both): bridge
Configuration applied

Save this configuration [y/N] ? 

Activate the changes [y/N] ? 
Configuration not activated

condor_configure_pool --default-group -l
Result:
Group "Internal Default Group":
Group ID: 1
Name: Internal Default Group
Features (priority: name):
  0: EC2Enhanced
  1: VMUniverse
Parameters:
  VM_BRIDGE_SCRIPT = /etc/xen/scripts/network-bridge start bridge=xenbr0
  JOB_ROUTER_ENTRIES = $(JOB_ROUTER_ENTRIES) [ GridResource = "condor
localhost $(COLLECTOR_HOST)"; Name = "Amazon High-CPU Medium";
requirements=target.WantAWS is true && (target.Universe is vanilla ||
target.Universe is 5) && (target.WantArch is "INTEL" || target.WantArch is
UNDEFINED) && ((target.WantCpus > 1 && target.WantCpus <= 5) ||
(target.WantDisk > 160 && target.WantDisk <= 350)); set_gridresource =
"amazon"; set_amazoninstancetype = "c1.medium"; set_remote_jobuniverse = 5;
set_amazonpublickey = "b"; set_amazonprivatekey = "b"; set_amazonaccesskey =
"b"; set_amazonsecretkey = "b"; set_rsapublickey = "b"; set_amazons3bucketname
= "b"; set_amazonsqsqueuename = "b"; set_amazonamiid = "b"; ]
  VM_TYPE = kvm
  VM_NETWORKING_TYPE = bridge
  NEED_SET_EC2E_ROUTES = FALSE
  VM_NETWORKING = TRUE
