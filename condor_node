#!/usr/bin/perl
#   Copyright 2008 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

use File::Basename;

my $node_name = $ARGV[0];
my $base_config_dir = "/etc/puppet/modules/condor/node_configs";
my $list = "";
my $filename;
my @files;
my $config_file;
my $config_dir;

# Find the pool the configuration file is in
$config_file = `find $base_config_dir -name $node_name`;
chomp $config_file;
$config_file =~ /^(.*)\/$node_name$/;
$config_dir = $1;

# Exit if the node's config file doesn't exist
if (! -f "$config_file" )
{
   # We don't know about the node, so print an empty config
   print "--- {}\n\n";
   exit 0;
}
else
{
   @config = `cat "$config_file"`;
}

# Print out the node's configuration
print "---\n";
print "classes:\n";
print "  - condor::condor\n";
if (grep /dbserver/, @config)
{
   print "  - condor::postgresql\n";
}
print "parameters:\n";
print "  node_name: $node_name\n";
foreach (@config)
{
   if (/^([\S]+)\s*=\s*(.+)$/)
   {
      # Config value has a value
      print "  $1: $2\n";
   }
   elsif (/^([\S]+)\s*=\s*$/)
   {
      # Config value is blank
      print "  $1:\n";
   }
   elsif (/^([\S]+)$/)
   {
      # No config value setting, so this is an enable flag
      print "  $1: True\n";

      # If the enable flag is for configuring an HA Central Manager
      # then form the list of Central Managers by looking at the other
      # config files for the ha_central_manager option
      if ($1 eq "ha_central_manager")
      {
         # Generate the list of other HA Central Managers
         $list = "";
         @files = `grep -H ha_central_manager "$config_dir"/*`;
         foreach (@files)
         {
            /^(.+):.+$/;
            $filename = fileparse($1);
            $list = $list . "$filename,";
         }
         chop $list;
         print "  ha_cm_list: $list\n";
      }
      elsif ($1 eq "scheduler")
      {
         # Generate the list of nodes that should be able to submit to this
         # scheduler node
         $list = "";
         @files = `egrep -H "^scheduler_name = $node_name\$" "$config_dir"/*`;
         push(@files, `egrep -H "^additional_scheds = (.*)$node_name(.*)\$" "$config_dir"/*`);

         # If this is an HA Scheduler, look for the nodes that can write to
         # the common schedd name
         if ((grep /ha_scheduler/, @config) >= 1)
         {
            push(@files, `egrep -H "^scheduler_name = (.*)ha-schedd@(.*)\$" "$config_dir"/*`);
            push(@files, `egrep -H "^additional_scheds = (.*)ha-schedd@(.*)\$" "$config_dir"/*`);
         }
         foreach (@files)
         {
            /^(.+):.+$/;
            $filename = fileparse($1);
            $list = $list . "$filename,";
         }
         chop $list;
         print "  sched_writes: $list\n";
      }
      elsif ($1 eq "startd")
      {
         # Generate the list of schedulers that can write to this startd
         $list = "";
         @files = `egrep "^scheduler_name = .*\$" "$config_dir"/$node_name | cut -d ' ' -f 3`;
         my $cmd_out = `egrep "^additional_scheds = " "$config_dir"/$node_name`;
         chomp $cmd_out;
         $cmd_out =~ /^additional_scheds\s*=\s*(\S*)$/;
         push(@files, split(/,/, $1));
         foreach (@files)
         {
            chomp;
            if ("$_" eq "ha-schedd@")
            {
               # Need to add all HA Scheduler hosts to the list
               my @ha_scheds = `egrep -H "ha_scheduler" "$config_dir"/*`;
               foreach (@ha_scheds)
               {
                  /^(.+):.+$/;
                  $filename = fileparse($1);
                  $list = $list . "$filename,";
               }
            }
            elsif ("$_" ne "")
            {
               $list = $list . "$_,";
            }
         }
         chop $list;
         print "  schedd_list: $list\n";
      }
   }
}

# Generate the list of Central Managers
$list = "";
@files = `egrep -H "^central_manager" "$config_dir"/*`;
foreach (@files)
{
   /^(.+):.+$/;
   $filename = fileparse($1);
   $list = $list . "$filename,";
}
chop $list;
print "  cm_list: $list\n";

# If the node is a Central Manager, then print the list of nodes configured
if ((grep /central_manager/, @config) >= 1)
{
   $list = "";
   opendir(DIR, $config_dir) || die("Unable to open $config_dir for reading\n");
   @files = readdir(DIR);
   closedir(DIR);
   foreach $node (@files)
   {
      if(!(($node eq ".") || ($node eq "..")))
      {
         $list = $list . "$node,";
      }
   }
   chop $list;
   print "  full_node_list: $list\n";
}

exit 0;
